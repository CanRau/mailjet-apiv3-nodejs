/*! For license information please see mailjet.node.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.mailjet=t():e.mailjet=t()}(this,(()=>(()=>{var e={579:(e,t,i)=>{"use strict";var a=i(9134),n=[];function o(){this.task=null,this.domain=null}e.exports=function(e){var t;t=n.length?n.pop():new o;t.task=e,t.domain=process.domain,a(t)},o.prototype.call=function(){this.domain&&this.domain.enter();var e=!0;try{this.task.call(),e=!1,this.domain&&this.domain.exit()}finally{e&&a.requestFlush(),this.task=null,this.domain=null,n.push(this)}}},9134:(e,t,i)=>{"use strict";var a,n="function"==typeof setImmediate;function o(e){s.length||(l(),r=!0),s[s.length]=e}e.exports=o;var s=[],r=!1,c=0;function p(){for(;c<s.length;){var e=c;if(c+=1,s[e].call(),c>1024){for(var t=0,i=s.length-c;t<i;t++)s[t]=s[t+c];s.length-=c,c=0}}s.length=0,c=0,r=!1}function l(){var e=process.domain;e&&(a||(a=i(3639)),a.active=process.domain=null),r&&n?setImmediate(p):process.nextTick(p),e&&(a.active=process.domain=e)}o.requestFlush=l},9118:(e,t,i)=>{e.exports={parallel:i(9162),serial:i(1357),serialOrdered:i(9087)}},7651:e=>{function t(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}e.exports=function(e){Object.keys(e.jobs).forEach(t.bind(e)),e.jobs={}}},5912:(e,t,i)=>{var a=i(9265);e.exports=function(e){var t=!1;return a((function(){t=!0})),function(i,n){t?e(i,n):a((function(){e(i,n)}))}}},9265:e=>{e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},7594:(e,t,i)=>{var a=i(5912),n=i(7651);e.exports=function(e,t,i,o){var s=i.keyedList?i.keyedList[i.index]:i.index;i.jobs[s]=function(e,t,i,n){var o;o=2==e.length?e(i,a(n)):e(i,t,a(n));return o}(t,s,e[s],(function(e,t){s in i.jobs&&(delete i.jobs[s],e?n(i):i.results[s]=t,o(e,i.results))}))}},4528:e=>{e.exports=function(e,t){var i=!Array.isArray(e),a={index:0,keyedList:i||t?Object.keys(e):null,jobs:{},results:i?{}:[],size:i?Object.keys(e).length:e.length};t&&a.keyedList.sort(i?t:function(i,a){return t(e[i],e[a])});return a}},5353:(e,t,i)=>{var a=i(7651),n=i(5912);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,a(this),n(e)(null,this.results)}},9162:(e,t,i)=>{var a=i(7594),n=i(4528),o=i(5353);e.exports=function(e,t,i){var s=n(e);for(;s.index<(s.keyedList||e).length;)a(e,t,s,(function(e,t){e?i(e,t):0!==Object.keys(s.jobs).length||i(null,s.results)})),s.index++;return o.bind(s,i)}},1357:(e,t,i)=>{var a=i(9087);e.exports=function(e,t,i){return a(e,t,null,i)}},9087:(e,t,i)=>{var a=i(7594),n=i(4528),o=i(5353);function s(e,t){return e<t?-1:e>t?1:0}e.exports=function(e,t,i,s){var r=n(e,i);return a(e,t,r,(function i(n,o){n?s(n,o):(r.index++,r.index<(r.keyedList||e).length?a(e,t,r,i):s(null,r.results))})),o.bind(r,s)},e.exports.ascending=s,e.exports.descending=function(e,t){return-1*s(e,t)}},1076:function(e,t,i){"use strict";function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,a=arguments.length;i<a;i++)for(var n in t=arguments[i])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(9006),r=o(i(9874)),c=o(i(4771)),p=o(i(4147)),l=function(){function e(e){if(!(0,s.isPureObject)(e))throw new Error('Argument "params" must be object');this.init(this.cloneParams(e))}return e.prototype.getPackageVersion=function(){return this.version},e.prototype.getAPIKey=function(){return this.apiKey},e.prototype.getAPISecret=function(){return this.apiSecret},e.prototype.getAPIToken=function(){return this.apiToken},e.prototype.getConfig=function(){return n({},this.config)},e.prototype.getOptions=function(){return n({},this.options)},e.prototype.get=function(e,t){return new c.default(this,r.default.Get,e,t)},e.prototype.post=function(e,t){return new c.default(this,r.default.Post,e,t)},e.prototype.put=function(e,t){return new c.default(this,r.default.Put,e,t)},e.prototype.delete=function(e,t){return new c.default(this,r.default.Delete,e,t)},e.prototype.init=function(t){if(!(0,s.isPureObject)(t))throw new Error('Argument "params" must be object');var i=t.apiToken,a=t.apiKey,n=t.apiSecret,o=t.options,r=t.config;return this.version=e.packageJSON.version,this.setConfig(null!=r?r:null),this.setOptions(null!=o?o:null),"apiToken"in t?this.tokenConnectStrategy(i):this.basicConnectStrategy(a,n)},e.prototype.cloneParams=function(e){if(!(0,s.isPureObject)(e))throw new Error('Argument "params" must be object');var t=n({},e);return e.options&&(t.options=n({},e.options)),e.config&&(t.config=n({},e.config)),t},e.prototype.setConfig=function(t){if("object"!==a(t))throw new Error('Argument "customConfig" must be object or null');var i=n({},e.config);return null!==t&&((0,s.setValueIfNotNil)(i,"host",t.host),(0,s.setValueIfNotNil)(i,"output",t.output),(0,s.setValueIfNotNil)(i,"version",t.version)),this.config=i,this},e.prototype.setOptions=function(e){if("object"!==a(e))throw new Error('Argument "options" must be object or null');return this.options=null!=e?e:{},this},e.prototype.tokenConnectStrategy=function(e){if(!e)throw new Error("Mailjet API_TOKEN is required");return this.apiToken=e,this},e.prototype.basicConnectStrategy=function(e,t){if(!e)throw new Error("Mailjet API_KEY is required");if(!t)throw new Error("Mailjet API_SECRET is required");return this.apiKey=e,this.apiSecret=t,this},e.apiConnect=function(t,i,a){return new e(n({apiKey:t,apiSecret:i},a))},e.smsConnect=function(t,i){return new e(n({apiToken:t},i))},e.config=Object.freeze({host:"api.mailjet.com",version:"v3",output:"json"}),e.packageJSON=Object.freeze(n({},p.default)),e}();t.default=l},8321:function(e,t,i){"use strict";var a,n=this&&this.__extends||(a=function(e,t){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},a(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HttpMethods=t.Request=t.Client=void 0;var s=o(i(9874));t.HttpMethods=s.default;var r=o(i(4771));t.Request=r.default;var c=o(i(1076));t.Client=c.default;var p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.Request=r.default,t.HttpMethods=s.default,t}(c.default);t.default=p},9874:(e,t)=>{"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Get="get",e.Post="post",e.Put="put",e.Delete="delete"}(i||(i={})),t.default=i},4771:function(e,t,i){"use strict";function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,a=arguments.length;i<a;i++)for(var n in t=arguments[i])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},n.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,i,a){void 0===a&&(a=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,a,n)}:function(e,t,i,a){void 0===a&&(a=i),e[a]=t[i]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return s(t,e),t},c=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{c(a.next(e))}catch(e){o(e)}}function r(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,r)}c((a=a.apply(e,t||[])).next())}))},p=this&&this.__generator||function(e,t){var i,a,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(o){return function(r){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,a=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(n=s.trys,(n=n.length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,r])}}},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=l(i(129)),d=l(i(4078)),m=r(i(4141)),f=l(i(4400)),h=i(9006),v=l(i(9874)),x=l(i(1076)),g=(0,f.default)({storeAsString:!0}),b=function(){function e(e,t,i,a){var o=this;if(!(e instanceof x.default))throw new Error('Argument "client" must be instance of Client');if(!Object.values(v.default).includes(t))throw new Error('Argument "method" must be one of supported methods: get, post, put, delete');if("string"!=typeof i)throw new Error('Argument "resource" must be string');this.client=e,this.method=t,this.url=i.toLowerCase(),this.resource=i.toLowerCase(),this.subPath=this.buildSubPath(),this.actionPath=null,this.config=n({},a),m.parse["application/json"]=function(e,t){if("string"==typeof e)return o.parseToJSONb(e);var i=[];e.on("data",(function(e){return i.push(e)})),e.on("end",(function(){var a=Buffer.concat(i).toString("utf-8");e.text=a,t(null,o.parseToJSONb(a))}))}}return e.prototype.getUserAgent=function(){return"mailjet-api-v3-nodejs/".concat(this.client.getPackageVersion())},e.prototype.getCredentials=function(){return{apiToken:this.client.getAPIToken(),apiKey:this.client.getAPIKey(),apiSecret:this.client.getAPISecret()}},e.prototype.getContentType=function(e){if("string"!=typeof e)throw new Error('Argument "url" must be string');return e.indexOf("text:plain")>-1?"text/plain":"application/json"},e.prototype.getParams=function(e){return"object"!==a(e)||(0,h.isNull)(e)?{}:e.filters?n({},e.filters):"get"===this.method?n({},e):{}},e.prototype.getRequest=function(e){var t;if("string"!=typeof e)throw new Error('Argument "url" must be string');var i=this.getCredentials(),a=this.client.getConfig(),o=this.client.getOptions(),s=m[this.method](e);s.set("user-agent",this.getUserAgent()).set("Content-type",this.getContentType(e)),i.apiToken?s.auth(i.apiToken,{type:"bearer"}):s.auth(i.apiKey,i.apiSecret,{type:"basic"}),o.requestHeaders&&Object.keys(o.requestHeaders).length>0&&s.set(n({},o.requestHeaders)),o.timeout&&s.timeout({response:o.timeout}),o.proxyUrl&&s.connect({"*":o.proxyUrl});var r=null!==(t=this.config.output)&&void 0!==t?t:a.output;return r&&s.accept(r),s},e.prototype.buildPath=function(e){var t,i;if(!(0,h.isPureObject)(e))throw new Error('Argument "params" must be object');var a=this.client.getConfig(),n=null!==(t=this.config.host)&&void 0!==t?t:a.host,o=null!==(i=this.config.version)&&void 0!==i?i:a.version,s=(0,d.default)(o,this.subPath),r=(0,d.default)(n,s,this.url);if(0===Object.keys(e).length)return r;var c=u.default.stringify(e);return"".concat(r,"?").concat(c)},e.prototype.buildSubPath=function(){if(this.actionPath){var e="contactslist"===this.resource&&"csvdata/text:plain"===this.actionPath,t="batchjob"===this.resource&&"csverror/text:csv"===this.actionPath;return e||t?"DATA":this.subPath}var i="send"===this.resource,a=this.resource.indexOf("sms")>-1;return i||a?"":"REST"},e.prototype.parseToJSONb=function(e){if("string"!=typeof e)throw new Error('Argument "text" must be string');var t;try{t=g.parse(e)}catch(e){t={}}return t},e.prototype.id=function(e){if(!["string","number"].includes(a(e)))throw new Error('Argument "value" must be string or number');return this.url=(0,d.default)(this.url,e.toString()),this},e.prototype.action=function(e){if("string"!=typeof e)throw new Error('Argument "name" must be string');switch(this.actionPath=e.toLowerCase(),this.actionPath){case"csvdata":this.actionPath="csvdata/text:plain";break;case"csverror":this.actionPath="csverror/text:csv"}return this.url=(0,d.default)(this.url,this.actionPath),this.subPath=this.buildSubPath(),this},e.prototype.request=function(t,i){var a,n,o,s,r,l,u;return void 0===i&&(i=!0),c(this,void 0,void 0,(function(){var c,d,m,f,v,x,g,b,y,w;return p(this,(function(p){switch(p.label){case 0:if(c=this.getParams(null!=t?t:{}),d="".concat(e.protocol).concat(this.buildPath(c)),this.url=this.resource,!i)return[2,{body:g=["post","put"].includes(this.method)?t:{},url:d}];m=this.getRequest(d),["post","put"].includes(this.method)&&t&&m.send(t),p.label=1;case 1:return p.trys.push([1,3,,4]),[4,m];case 2:return[2,{response:f=p.sent(),body:f.body}];case 3:throw v=p.sent(),x=v.response,g=null!==(a=null==x?void 0:x.body)&&void 0!==a?a:{},b=null!==(n=g.ErrorMessage)&&void 0!==n?n:v.message,(y=new Error).response=null!=x?x:null,y.statusCode=null!==(o=v.status)&&void 0!==o?o:null,y.message='Unsuccessful: Status Code: "'.concat(y.statusCode,'" Message: "').concat(b,'"'),x&&("string"==typeof(w=null===(u=null===(l=null===(r=null===(s=g.Messages)||void 0===s?void 0:s[0])||void 0===r?void 0:r.Errors)||void 0===l?void 0:l[0])||void 0===u?void 0:u.ErrorMessage)&&(y.message+=";\n".concat(w)),y.statuses={ok:x.ok,clientError:x.clientError,serverError:x.serverError}),(0,h.setValueIfNotNil)(y,"timeout",v.timeout),(0,h.setValueIfNotNil)(y,"code",v.code),(0,h.setValueIfNotNil)(y,"errno",v.errno),(0,h.setValueIfNotNil)(y,"ErrorMessage",b),(0,h.setValueIfNotNil)(y,"ErrorCode",g.ErrorCode),(0,h.setValueIfNotNil)(y,"ErrorIdentifier",g.ErrorIdentifier),(0,h.setValueIfNotNil)(y,"ErrorRelatedTo",g.ErrorRelatedTo),y;case 4:return[2]}}))}))},e.protocol="https://",e}();t.default=b},9006:function(e,t,i){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setValueIfNotNil=t.isPureObject=t.isUndefined=t.isNull=t.isNil=void 0;var n=a(i(3767));t.isNil=n.default;var o=a(i(7376));t.isNull=o.default;var s=a(i(5034));t.isUndefined=s.default;var r=a(i(1818));t.isPureObject=r.default;var c=a(i(1190));t.setValueIfNotNil=c.default},3767:function(e,t,i){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var n=a(i(7376)),o=a(i(5034));t.default=function(e){return(0,o.default)(e)||(0,n.default)(e)}},7376:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return null===e}},1818:(e,t)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"object"===i(e)&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}},5034:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return void 0===e}},1190:function(e,t,i){"use strict";function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(3767)),s=n(i(7376));t.default=function(e,t,i){if("object"!==a(e)||(0,s.default)(e))throw Error('Argument "targetObject" is not object');if(!t)throw Error('Argument "path" is required');(0,o.default)(i)||(e[t]=i)}},4431:function(e,t,i){var a;!function(n){"use strict";var o,s=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,r=Math.ceil,c=Math.floor,p="[BigNumber Error] ",l=p+"Number primitive has more than 15 significant digits: ",u=1e14,d=14,m=9007199254740991,f=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],h=1e7,v=1e9;function x(e){var t=0|e;return e>0||e===t?t:t-1}function g(e){for(var t,i,a=1,n=e.length,o=e[0]+"";a<n;){for(t=e[a++]+"",i=d-t.length;i--;t="0"+t);o+=t}for(n=o.length;48===o.charCodeAt(--n););return o.slice(0,n+1||1)}function b(e,t){var i,a,n=e.c,o=t.c,s=e.s,r=t.s,c=e.e,p=t.e;if(!s||!r)return null;if(i=n&&!n[0],a=o&&!o[0],i||a)return i?a?0:-r:s;if(s!=r)return s;if(i=s<0,a=c==p,!n||!o)return a?0:!n^i?1:-1;if(!a)return c>p^i?1:-1;for(r=(c=n.length)<(p=o.length)?c:p,s=0;s<r;s++)if(n[s]!=o[s])return n[s]>o[s]^i?1:-1;return c==p?0:c>p^i?1:-1}function y(e,t,i,a){if(e<t||e>i||e!==c(e))throw Error(p+(a||"Argument")+("number"==typeof e?e<t||e>i?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function w(e){var t=e.c.length-1;return x(e.e/d)==t&&e.c[t]%2!=0}function k(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function j(e,t,i){var a,n;if(t<0){for(n=i+".";++t;n+=i);e=n+e}else if(++t>(a=e.length)){for(n=i,t-=a;--t;n+=i);e+=n}else t<a&&(e=e.slice(0,t)+"."+e.slice(t));return e}o=function e(t){var i,a,n,o,E,_,S,O,A,T,C=H.prototype={constructor:H,toString:null,valueOf:null},N=new H(1),R=20,P=4,I=-7,F=21,z=-1e7,L=1e7,D=!1,$=1,q=0,M={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},U="0123456789abcdefghijklmnopqrstuvwxyz",B=!0;function H(e,t){var i,o,r,p,u,f,h,v,x=this;if(!(x instanceof H))return new H(e,t);if(null==t){if(e&&!0===e._isBigNumber)return x.s=e.s,void(!e.c||e.e>L?x.c=x.e=null:e.e<z?x.c=[x.e=0]:(x.e=e.e,x.c=e.c.slice()));if((f="number"==typeof e)&&0*e==0){if(x.s=1/e<0?(e=-e,-1):1,e===~~e){for(p=0,u=e;u>=10;u/=10,p++);return void(p>L?x.c=x.e=null:(x.e=p,x.c=[e]))}v=String(e)}else{if(!s.test(v=String(e)))return n(x,v,f);x.s=45==v.charCodeAt(0)?(v=v.slice(1),-1):1}(p=v.indexOf("."))>-1&&(v=v.replace(".","")),(u=v.search(/e/i))>0?(p<0&&(p=u),p+=+v.slice(u+1),v=v.substring(0,u)):p<0&&(p=v.length)}else{if(y(t,2,U.length,"Base"),10==t&&B)return J(x=new H(e),R+x.e+1,P);if(v=String(e),f="number"==typeof e){if(0*e!=0)return n(x,v,f,t);if(x.s=1/e<0?(v=v.slice(1),-1):1,H.DEBUG&&v.replace(/^0\.0*|\./,"").length>15)throw Error(l+e)}else x.s=45===v.charCodeAt(0)?(v=v.slice(1),-1):1;for(i=U.slice(0,t),p=u=0,h=v.length;u<h;u++)if(i.indexOf(o=v.charAt(u))<0){if("."==o){if(u>p){p=h;continue}}else if(!r&&(v==v.toUpperCase()&&(v=v.toLowerCase())||v==v.toLowerCase()&&(v=v.toUpperCase()))){r=!0,u=-1,p=0;continue}return n(x,String(e),f,t)}f=!1,(p=(v=a(v,t,10,x.s)).indexOf("."))>-1?v=v.replace(".",""):p=v.length}for(u=0;48===v.charCodeAt(u);u++);for(h=v.length;48===v.charCodeAt(--h););if(v=v.slice(u,++h)){if(h-=u,f&&H.DEBUG&&h>15&&(e>m||e!==c(e)))throw Error(l+x.s*e);if((p=p-u-1)>L)x.c=x.e=null;else if(p<z)x.c=[x.e=0];else{if(x.e=p,x.c=[],u=(p+1)%d,p<0&&(u+=d),u<h){for(u&&x.c.push(+v.slice(0,u)),h-=d;u<h;)x.c.push(+v.slice(u,u+=d));u=d-(v=v.slice(u)).length}else u-=h;for(;u--;v+="0");x.c.push(+v)}}else x.c=[x.e=0]}function G(e,t,i,a){var n,o,s,r,c;if(null==i?i=P:y(i,0,8),!e.c)return e.toString();if(n=e.c[0],s=e.e,null==t)c=g(e.c),c=1==a||2==a&&(s<=I||s>=F)?k(c,s):j(c,s,"0");else if(o=(e=J(new H(e),t,i)).e,r=(c=g(e.c)).length,1==a||2==a&&(t<=o||o<=I)){for(;r<t;c+="0",r++);c=k(c,o)}else if(t-=s,c=j(c,o,"0"),o+1>r){if(--t>0)for(c+=".";t--;c+="0");}else if((t+=o-r)>0)for(o+1==r&&(c+=".");t--;c+="0");return e.s<0&&n?"-"+c:c}function V(e,t){for(var i,a=1,n=new H(e[0]);a<e.length;a++){if(!(i=new H(e[a])).s){n=i;break}t.call(n,i)&&(n=i)}return n}function W(e,t,i){for(var a=1,n=t.length;!t[--n];t.pop());for(n=t[0];n>=10;n/=10,a++);return(i=a+i*d-1)>L?e.c=e.e=null:i<z?e.c=[e.e=0]:(e.e=i,e.c=t),e}function J(e,t,i,a){var n,o,s,p,l,m,h,v=e.c,x=f;if(v){e:{for(n=1,p=v[0];p>=10;p/=10,n++);if((o=t-n)<0)o+=d,s=t,h=(l=v[m=0])/x[n-s-1]%10|0;else if((m=r((o+1)/d))>=v.length){if(!a)break e;for(;v.length<=m;v.push(0));l=h=0,n=1,s=(o%=d)-d+1}else{for(l=p=v[m],n=1;p>=10;p/=10,n++);h=(s=(o%=d)-d+n)<0?0:l/x[n-s-1]%10|0}if(a=a||t<0||null!=v[m+1]||(s<0?l:l%x[n-s-1]),a=i<4?(h||a)&&(0==i||i==(e.s<0?3:2)):h>5||5==h&&(4==i||a||6==i&&(o>0?s>0?l/x[n-s]:0:v[m-1])%10&1||i==(e.s<0?8:7)),t<1||!v[0])return v.length=0,a?(t-=e.e+1,v[0]=x[(d-t%d)%d],e.e=-t||0):v[0]=e.e=0,e;if(0==o?(v.length=m,p=1,m--):(v.length=m+1,p=x[d-o],v[m]=s>0?c(l/x[n-s]%x[s])*p:0),a)for(;;){if(0==m){for(o=1,s=v[0];s>=10;s/=10,o++);for(s=v[0]+=p,p=1;s>=10;s/=10,p++);o!=p&&(e.e++,v[0]==u&&(v[0]=1));break}if(v[m]+=p,v[m]!=u)break;v[m--]=0,p=1}for(o=v.length;0===v[--o];v.pop());}e.e>L?e.c=e.e=null:e.e<z&&(e.c=[e.e=0])}return e}function X(e){var t,i=e.e;return null===i?e.toString():(t=g(e.c),t=i<=I||i>=F?k(t,i):j(t,i,"0"),e.s<0?"-"+t:t)}return H.clone=e,H.ROUND_UP=0,H.ROUND_DOWN=1,H.ROUND_CEIL=2,H.ROUND_FLOOR=3,H.ROUND_HALF_UP=4,H.ROUND_HALF_DOWN=5,H.ROUND_HALF_EVEN=6,H.ROUND_HALF_CEIL=7,H.ROUND_HALF_FLOOR=8,H.EUCLID=9,H.config=H.set=function(e){var t,i;if(null!=e){if("object"!=typeof e)throw Error(p+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(y(i=e[t],0,v,t),R=i),e.hasOwnProperty(t="ROUNDING_MODE")&&(y(i=e[t],0,8,t),P=i),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((i=e[t])&&i.pop?(y(i[0],-v,0,t),y(i[1],0,v,t),I=i[0],F=i[1]):(y(i,-v,v,t),I=-(F=i<0?-i:i))),e.hasOwnProperty(t="RANGE"))if((i=e[t])&&i.pop)y(i[0],-v,-1,t),y(i[1],1,v,t),z=i[0],L=i[1];else{if(y(i,-v,v,t),!i)throw Error(p+t+" cannot be zero: "+i);z=-(L=i<0?-i:i)}if(e.hasOwnProperty(t="CRYPTO")){if((i=e[t])!==!!i)throw Error(p+t+" not true or false: "+i);if(i){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw D=!i,Error(p+"crypto unavailable");D=i}else D=i}if(e.hasOwnProperty(t="MODULO_MODE")&&(y(i=e[t],0,9,t),$=i),e.hasOwnProperty(t="POW_PRECISION")&&(y(i=e[t],0,v,t),q=i),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(i=e[t]))throw Error(p+t+" not an object: "+i);M=i}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(i=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(i))throw Error(p+t+" invalid: "+i);B="0123456789"==i.slice(0,10),U=i}}return{DECIMAL_PLACES:R,ROUNDING_MODE:P,EXPONENTIAL_AT:[I,F],RANGE:[z,L],CRYPTO:D,MODULO_MODE:$,POW_PRECISION:q,FORMAT:M,ALPHABET:U}},H.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!H.DEBUG)return!0;var t,i,a=e.c,n=e.e,o=e.s;e:if("[object Array]"=={}.toString.call(a)){if((1===o||-1===o)&&n>=-v&&n<=v&&n===c(n)){if(0===a[0]){if(0===n&&1===a.length)return!0;break e}if((t=(n+1)%d)<1&&(t+=d),String(a[0]).length==t){for(t=0;t<a.length;t++)if((i=a[t])<0||i>=u||i!==c(i))break e;if(0!==i)return!0}}}else if(null===a&&null===n&&(null===o||1===o||-1===o))return!0;throw Error(p+"Invalid BigNumber: "+e)},H.maximum=H.max=function(){return V(arguments,C.lt)},H.minimum=H.min=function(){return V(arguments,C.gt)},H.random=(o=9007199254740992,E=Math.random()*o&2097151?function(){return c(Math.random()*o)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,i,a,n,o,s=0,l=[],u=new H(N);if(null==e?e=R:y(e,0,v),n=r(e/d),D)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(n*=2));s<n;)(o=131072*t[s]+(t[s+1]>>>11))>=9e15?(i=crypto.getRandomValues(new Uint32Array(2)),t[s]=i[0],t[s+1]=i[1]):(l.push(o%1e14),s+=2);s=n/2}else{if(!crypto.randomBytes)throw D=!1,Error(p+"crypto unavailable");for(t=crypto.randomBytes(n*=7);s<n;)(o=281474976710656*(31&t[s])+1099511627776*t[s+1]+4294967296*t[s+2]+16777216*t[s+3]+(t[s+4]<<16)+(t[s+5]<<8)+t[s+6])>=9e15?crypto.randomBytes(7).copy(t,s):(l.push(o%1e14),s+=7);s=n/7}if(!D)for(;s<n;)(o=E())<9e15&&(l[s++]=o%1e14);for(n=l[--s],e%=d,n&&e&&(o=f[d-e],l[s]=c(n/o)*o);0===l[s];l.pop(),s--);if(s<0)l=[a=0];else{for(a=-1;0===l[0];l.splice(0,1),a-=d);for(s=1,o=l[0];o>=10;o/=10,s++);s<d&&(a-=d-s)}return u.e=a,u.c=l,u}),H.sum=function(){for(var e=1,t=arguments,i=new H(t[0]);e<t.length;)i=i.plus(t[e++]);return i},a=function(){var e="0123456789";function t(e,t,i,a){for(var n,o,s=[0],r=0,c=e.length;r<c;){for(o=s.length;o--;s[o]*=t);for(s[0]+=a.indexOf(e.charAt(r++)),n=0;n<s.length;n++)s[n]>i-1&&(null==s[n+1]&&(s[n+1]=0),s[n+1]+=s[n]/i|0,s[n]%=i)}return s.reverse()}return function(a,n,o,s,r){var c,p,l,u,d,m,f,h,v=a.indexOf("."),x=R,b=P;for(v>=0&&(u=q,q=0,a=a.replace(".",""),m=(h=new H(n)).pow(a.length-v),q=u,h.c=t(j(g(m.c),m.e,"0"),10,o,e),h.e=h.c.length),l=u=(f=t(a,n,o,r?(c=U,e):(c=e,U))).length;0==f[--u];f.pop());if(!f[0])return c.charAt(0);if(v<0?--l:(m.c=f,m.e=l,m.s=s,f=(m=i(m,h,x,b,o)).c,d=m.r,l=m.e),v=f[p=l+x+1],u=o/2,d=d||p<0||null!=f[p+1],d=b<4?(null!=v||d)&&(0==b||b==(m.s<0?3:2)):v>u||v==u&&(4==b||d||6==b&&1&f[p-1]||b==(m.s<0?8:7)),p<1||!f[0])a=d?j(c.charAt(1),-x,c.charAt(0)):c.charAt(0);else{if(f.length=p,d)for(--o;++f[--p]>o;)f[p]=0,p||(++l,f=[1].concat(f));for(u=f.length;!f[--u];);for(v=0,a="";v<=u;a+=c.charAt(f[v++]));a=j(a,l,c.charAt(0))}return a}}(),i=function(){function e(e,t,i){var a,n,o,s,r=0,c=e.length,p=t%h,l=t/h|0;for(e=e.slice();c--;)r=((n=p*(o=e[c]%h)+(a=l*o+(s=e[c]/h|0)*p)%h*h+r)/i|0)+(a/h|0)+l*s,e[c]=n%i;return r&&(e=[r].concat(e)),e}function t(e,t,i,a){var n,o;if(i!=a)o=i>a?1:-1;else for(n=o=0;n<i;n++)if(e[n]!=t[n]){o=e[n]>t[n]?1:-1;break}return o}function i(e,t,i,a){for(var n=0;i--;)e[i]-=n,n=e[i]<t[i]?1:0,e[i]=n*a+e[i]-t[i];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(a,n,o,s,r){var p,l,m,f,h,v,g,b,y,w,k,j,E,_,S,O,A,T=a.s==n.s?1:-1,C=a.c,N=n.c;if(!(C&&C[0]&&N&&N[0]))return new H(a.s&&n.s&&(C?!N||C[0]!=N[0]:N)?C&&0==C[0]||!N?0*T:T/0:NaN);for(y=(b=new H(T)).c=[],T=o+(l=a.e-n.e)+1,r||(r=u,l=x(a.e/d)-x(n.e/d),T=T/d|0),m=0;N[m]==(C[m]||0);m++);if(N[m]>(C[m]||0)&&l--,T<0)y.push(1),f=!0;else{for(_=C.length,O=N.length,m=0,T+=2,(h=c(r/(N[0]+1)))>1&&(N=e(N,h,r),C=e(C,h,r),O=N.length,_=C.length),E=O,k=(w=C.slice(0,O)).length;k<O;w[k++]=0);A=N.slice(),A=[0].concat(A),S=N[0],N[1]>=r/2&&S++;do{if(h=0,(p=t(N,w,O,k))<0){if(j=w[0],O!=k&&(j=j*r+(w[1]||0)),(h=c(j/S))>1)for(h>=r&&(h=r-1),g=(v=e(N,h,r)).length,k=w.length;1==t(v,w,g,k);)h--,i(v,O<g?A:N,g,r),g=v.length,p=1;else 0==h&&(p=h=1),g=(v=N.slice()).length;if(g<k&&(v=[0].concat(v)),i(w,v,k,r),k=w.length,-1==p)for(;t(N,w,O,k)<1;)h++,i(w,O<k?A:N,k,r),k=w.length}else 0===p&&(h++,w=[0]);y[m++]=h,w[0]?w[k++]=C[E]||0:(w=[C[E]],k=1)}while((E++<_||null!=w[0])&&T--);f=null!=w[0],y[0]||y.splice(0,1)}if(r==u){for(m=1,T=y[0];T>=10;T/=10,m++);J(b,o+(b.e=m+l*d-1)+1,s,f)}else b.e=l,b.r=+f;return b}}(),_=/^(-?)0([xbo])(?=\w[\w.]*$)/i,S=/^([^.]+)\.$/,O=/^\.([^.]+)$/,A=/^-?(Infinity|NaN)$/,T=/^\s*\+(?=[\w.])|^\s+|\s+$/g,n=function(e,t,i,a){var n,o=i?t:t.replace(T,"");if(A.test(o))e.s=isNaN(o)?null:o<0?-1:1;else{if(!i&&(o=o.replace(_,(function(e,t,i){return n="x"==(i=i.toLowerCase())?16:"b"==i?2:8,a&&a!=n?e:t})),a&&(n=a,o=o.replace(S,"$1").replace(O,"0.$1")),t!=o))return new H(o,n);if(H.DEBUG)throw Error(p+"Not a"+(a?" base "+a:"")+" number: "+t);e.s=null}e.c=e.e=null},C.absoluteValue=C.abs=function(){var e=new H(this);return e.s<0&&(e.s=1),e},C.comparedTo=function(e,t){return b(this,new H(e,t))},C.decimalPlaces=C.dp=function(e,t){var i,a,n,o=this;if(null!=e)return y(e,0,v),null==t?t=P:y(t,0,8),J(new H(o),e+o.e+1,t);if(!(i=o.c))return null;if(a=((n=i.length-1)-x(this.e/d))*d,n=i[n])for(;n%10==0;n/=10,a--);return a<0&&(a=0),a},C.dividedBy=C.div=function(e,t){return i(this,new H(e,t),R,P)},C.dividedToIntegerBy=C.idiv=function(e,t){return i(this,new H(e,t),0,1)},C.exponentiatedBy=C.pow=function(e,t){var i,a,n,o,s,l,u,m,f=this;if((e=new H(e)).c&&!e.isInteger())throw Error(p+"Exponent not an integer: "+X(e));if(null!=t&&(t=new H(t)),s=e.e>14,!f.c||!f.c[0]||1==f.c[0]&&!f.e&&1==f.c.length||!e.c||!e.c[0])return m=new H(Math.pow(+X(f),s?2-w(e):+X(e))),t?m.mod(t):m;if(l=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new H(NaN);(a=!l&&f.isInteger()&&t.isInteger())&&(f=f.mod(t))}else{if(e.e>9&&(f.e>0||f.e<-1||(0==f.e?f.c[0]>1||s&&f.c[1]>=24e7:f.c[0]<8e13||s&&f.c[0]<=9999975e7)))return o=f.s<0&&w(e)?-0:0,f.e>-1&&(o=1/o),new H(l?1/o:o);q&&(o=r(q/d+2))}for(s?(i=new H(.5),l&&(e.s=1),u=w(e)):u=(n=Math.abs(+X(e)))%2,m=new H(N);;){if(u){if(!(m=m.times(f)).c)break;o?m.c.length>o&&(m.c.length=o):a&&(m=m.mod(t))}if(n){if(0===(n=c(n/2)))break;u=n%2}else if(J(e=e.times(i),e.e+1,1),e.e>14)u=w(e);else{if(0===(n=+X(e)))break;u=n%2}f=f.times(f),o?f.c&&f.c.length>o&&(f.c.length=o):a&&(f=f.mod(t))}return a?m:(l&&(m=N.div(m)),t?m.mod(t):o?J(m,q,P,undefined):m)},C.integerValue=function(e){var t=new H(this);return null==e?e=P:y(e,0,8),J(t,t.e+1,e)},C.isEqualTo=C.eq=function(e,t){return 0===b(this,new H(e,t))},C.isFinite=function(){return!!this.c},C.isGreaterThan=C.gt=function(e,t){return b(this,new H(e,t))>0},C.isGreaterThanOrEqualTo=C.gte=function(e,t){return 1===(t=b(this,new H(e,t)))||0===t},C.isInteger=function(){return!!this.c&&x(this.e/d)>this.c.length-2},C.isLessThan=C.lt=function(e,t){return b(this,new H(e,t))<0},C.isLessThanOrEqualTo=C.lte=function(e,t){return-1===(t=b(this,new H(e,t)))||0===t},C.isNaN=function(){return!this.s},C.isNegative=function(){return this.s<0},C.isPositive=function(){return this.s>0},C.isZero=function(){return!!this.c&&0==this.c[0]},C.minus=function(e,t){var i,a,n,o,s=this,r=s.s;if(t=(e=new H(e,t)).s,!r||!t)return new H(NaN);if(r!=t)return e.s=-t,s.plus(e);var c=s.e/d,p=e.e/d,l=s.c,m=e.c;if(!c||!p){if(!l||!m)return l?(e.s=-t,e):new H(m?s:NaN);if(!l[0]||!m[0])return m[0]?(e.s=-t,e):new H(l[0]?s:3==P?-0:0)}if(c=x(c),p=x(p),l=l.slice(),r=c-p){for((o=r<0)?(r=-r,n=l):(p=c,n=m),n.reverse(),t=r;t--;n.push(0));n.reverse()}else for(a=(o=(r=l.length)<(t=m.length))?r:t,r=t=0;t<a;t++)if(l[t]!=m[t]){o=l[t]<m[t];break}if(o&&(n=l,l=m,m=n,e.s=-e.s),(t=(a=m.length)-(i=l.length))>0)for(;t--;l[i++]=0);for(t=u-1;a>r;){if(l[--a]<m[a]){for(i=a;i&&!l[--i];l[i]=t);--l[i],l[a]+=u}l[a]-=m[a]}for(;0==l[0];l.splice(0,1),--p);return l[0]?W(e,l,p):(e.s=3==P?-1:1,e.c=[e.e=0],e)},C.modulo=C.mod=function(e,t){var a,n,o=this;return e=new H(e,t),!o.c||!e.s||e.c&&!e.c[0]?new H(NaN):!e.c||o.c&&!o.c[0]?new H(o):(9==$?(n=e.s,e.s=1,a=i(o,e,0,3),e.s=n,a.s*=n):a=i(o,e,0,$),(e=o.minus(a.times(e))).c[0]||1!=$||(e.s=o.s),e)},C.multipliedBy=C.times=function(e,t){var i,a,n,o,s,r,c,p,l,m,f,v,g,b,y,w=this,k=w.c,j=(e=new H(e,t)).c;if(!(k&&j&&k[0]&&j[0]))return!w.s||!e.s||k&&!k[0]&&!j||j&&!j[0]&&!k?e.c=e.e=e.s=null:(e.s*=w.s,k&&j?(e.c=[0],e.e=0):e.c=e.e=null),e;for(a=x(w.e/d)+x(e.e/d),e.s*=w.s,(c=k.length)<(m=j.length)&&(g=k,k=j,j=g,n=c,c=m,m=n),n=c+m,g=[];n--;g.push(0));for(b=u,y=h,n=m;--n>=0;){for(i=0,f=j[n]%y,v=j[n]/y|0,o=n+(s=c);o>n;)i=((p=f*(p=k[--s]%y)+(r=v*p+(l=k[s]/y|0)*f)%y*y+g[o]+i)/b|0)+(r/y|0)+v*l,g[o--]=p%b;g[o]=i}return i?++a:g.splice(0,1),W(e,g,a)},C.negated=function(){var e=new H(this);return e.s=-e.s||null,e},C.plus=function(e,t){var i,a=this,n=a.s;if(t=(e=new H(e,t)).s,!n||!t)return new H(NaN);if(n!=t)return e.s=-t,a.minus(e);var o=a.e/d,s=e.e/d,r=a.c,c=e.c;if(!o||!s){if(!r||!c)return new H(n/0);if(!r[0]||!c[0])return c[0]?e:new H(r[0]?a:0*n)}if(o=x(o),s=x(s),r=r.slice(),n=o-s){for(n>0?(s=o,i=c):(n=-n,i=r),i.reverse();n--;i.push(0));i.reverse()}for((n=r.length)-(t=c.length)<0&&(i=c,c=r,r=i,t=n),n=0;t;)n=(r[--t]=r[t]+c[t]+n)/u|0,r[t]=u===r[t]?0:r[t]%u;return n&&(r=[n].concat(r),++s),W(e,r,s)},C.precision=C.sd=function(e,t){var i,a,n,o=this;if(null!=e&&e!==!!e)return y(e,1,v),null==t?t=P:y(t,0,8),J(new H(o),e,t);if(!(i=o.c))return null;if(a=(n=i.length-1)*d+1,n=i[n]){for(;n%10==0;n/=10,a--);for(n=i[0];n>=10;n/=10,a++);}return e&&o.e+1>a&&(a=o.e+1),a},C.shiftedBy=function(e){return y(e,-9007199254740991,m),this.times("1e"+e)},C.squareRoot=C.sqrt=function(){var e,t,a,n,o,s=this,r=s.c,c=s.s,p=s.e,l=R+4,u=new H("0.5");if(1!==c||!r||!r[0])return new H(!c||c<0&&(!r||r[0])?NaN:r?s:1/0);if(0==(c=Math.sqrt(+X(s)))||c==1/0?(((t=g(r)).length+p)%2==0&&(t+="0"),c=Math.sqrt(+t),p=x((p+1)/2)-(p<0||p%2),a=new H(t=c==1/0?"5e"+p:(t=c.toExponential()).slice(0,t.indexOf("e")+1)+p)):a=new H(c+""),a.c[0])for((c=(p=a.e)+l)<3&&(c=0);;)if(o=a,a=u.times(o.plus(i(s,o,l,1))),g(o.c).slice(0,c)===(t=g(a.c)).slice(0,c)){if(a.e<p&&--c,"9999"!=(t=t.slice(c-3,c+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(J(a,a.e+R+2,1),e=!a.times(a).eq(s));break}if(!n&&(J(o,o.e+R+2,0),o.times(o).eq(s))){a=o;break}l+=4,c+=4,n=1}return J(a,a.e+R+1,P,e)},C.toExponential=function(e,t){return null!=e&&(y(e,0,v),e++),G(this,e,t,1)},C.toFixed=function(e,t){return null!=e&&(y(e,0,v),e=e+this.e+1),G(this,e,t)},C.toFormat=function(e,t,i){var a,n=this;if(null==i)null!=e&&t&&"object"==typeof t?(i=t,t=null):e&&"object"==typeof e?(i=e,e=t=null):i=M;else if("object"!=typeof i)throw Error(p+"Argument not an object: "+i);if(a=n.toFixed(e,t),n.c){var o,s=a.split("."),r=+i.groupSize,c=+i.secondaryGroupSize,l=i.groupSeparator||"",u=s[0],d=s[1],m=n.s<0,f=m?u.slice(1):u,h=f.length;if(c&&(o=r,r=c,c=o,h-=o),r>0&&h>0){for(o=h%r||r,u=f.substr(0,o);o<h;o+=r)u+=l+f.substr(o,r);c>0&&(u+=l+f.slice(o)),m&&(u="-"+u)}a=d?u+(i.decimalSeparator||"")+((c=+i.fractionGroupSize)?d.replace(new RegExp("\\d{"+c+"}\\B","g"),"$&"+(i.fractionGroupSeparator||"")):d):u}return(i.prefix||"")+a+(i.suffix||"")},C.toFraction=function(e){var t,a,n,o,s,r,c,l,u,m,h,v,x=this,b=x.c;if(null!=e&&(!(c=new H(e)).isInteger()&&(c.c||1!==c.s)||c.lt(N)))throw Error(p+"Argument "+(c.isInteger()?"out of range: ":"not an integer: ")+X(c));if(!b)return new H(x);for(t=new H(N),u=a=new H(N),n=l=new H(N),v=g(b),s=t.e=v.length-x.e-1,t.c[0]=f[(r=s%d)<0?d+r:r],e=!e||c.comparedTo(t)>0?s>0?t:u:c,r=L,L=1/0,c=new H(v),l.c[0]=0;m=i(c,t,0,1),1!=(o=a.plus(m.times(n))).comparedTo(e);)a=n,n=o,u=l.plus(m.times(o=u)),l=o,t=c.minus(m.times(o=t)),c=o;return o=i(e.minus(a),n,0,1),l=l.plus(o.times(u)),a=a.plus(o.times(n)),l.s=u.s=x.s,h=i(u,n,s*=2,P).minus(x).abs().comparedTo(i(l,a,s,P).minus(x).abs())<1?[u,n]:[l,a],L=r,h},C.toNumber=function(){return+X(this)},C.toPrecision=function(e,t){return null!=e&&y(e,1,v),G(this,e,t,2)},C.toString=function(e){var t,i=this,n=i.s,o=i.e;return null===o?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(null==e?t=o<=I||o>=F?k(g(i.c),o):j(g(i.c),o,"0"):10===e&&B?t=j(g((i=J(new H(i),R+o+1,P)).c),i.e,"0"):(y(e,2,U.length,"Base"),t=a(j(g(i.c),o,"0"),10,e,n,!0)),n<0&&i.c[0]&&(t="-"+t)),t},C.valueOf=C.toJSON=function(){return X(this)},C._isBigNumber=!0,null!=t&&H.set(t),H}(),o.default=o.BigNumber=o,void 0===(a=function(){return o}.call(t,i,t,e))||(e.exports=a)}()},1924:(e,t,i)=>{"use strict";var a=i(210),n=i(5559),o=n(a("String.prototype.indexOf"));e.exports=function(e,t){var i=a(e,!!t);return"function"==typeof i&&o(e,".prototype.")>-1?n(i):i}},5559:(e,t,i)=>{"use strict";var a=i(8612),n=i(210),o=n("%Function.prototype.apply%"),s=n("%Function.prototype.call%"),r=n("%Reflect.apply%",!0)||a.call(s,o),c=n("%Object.getOwnPropertyDescriptor%",!0),p=n("%Object.defineProperty%",!0),l=n("%Math.max%");if(p)try{p({},"a",{value:1})}catch(e){p=null}e.exports=function(e){var t=r(a,s,arguments);if(c&&p){var i=c(t,"length");i.configurable&&p(t,"length",{value:1+l(0,e.length-(arguments.length-1))})}return t};var u=function(){return r(a,o,arguments)};p?p(e.exports,"apply",{value:u}):e.exports.apply=u},9779:(e,t,i)=>{var a=i(3837),n=i(2781).Stream,o=i(3463);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}e.exports=s,a.inherits(s,n),s.create=function(e){var t=new this;for(var i in e=e||{})t[i]=e[i];return t},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof o)){var t=o.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=t}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,t){return n.prototype.pipe.call(this,e,t),this.resume(),e},s.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},s.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var t=e;this.write(t),this._getNext()},s.prototype._handleErrors=function(e){var t=this;e.on("error",(function(e){t._emitError(e)}))},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(t){t.dataSize&&(e.dataSize+=t.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},7866:(e,t)=>{!function(){"use strict";function e(t,i,a,n){return this instanceof e?(this.domain=t||void 0,this.path=i||"/",this.secure=!!a,this.script=!!n,this):new e(t,i,a,n)}function i(e,t,a){return e instanceof i?e:this instanceof i?(this.name=null,this.value=null,this.expiration_date=1/0,this.path=String(a||"/"),this.explicit_path=!1,this.domain=t||null,this.explicit_domain=!1,this.secure=!1,this.noscript=!1,e&&this.parse(e,t,a),this):new i(e,t,a)}e.All=Object.freeze(Object.create(null)),t.CookieAccessInfo=e,t.Cookie=i,i.prototype.toString=function(){var e=[this.name+"="+this.value];return this.expiration_date!==1/0&&e.push("expires="+new Date(this.expiration_date).toGMTString()),this.domain&&e.push("domain="+this.domain),this.path&&e.push("path="+this.path),this.secure&&e.push("secure"),this.noscript&&e.push("httponly"),e.join("; ")},i.prototype.toValueString=function(){return this.name+"="+this.value};var a=/[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;function n(){var e,t;return this instanceof n?(e=Object.create(null),this.setCookie=function(a,n,o){var s,r;if(s=(a=new i(a,n,o)).expiration_date<=Date.now(),void 0!==e[a.name]){for(t=e[a.name],r=0;r<t.length;r+=1)if(t[r].collidesWith(a))return s?(t.splice(r,1),0===t.length&&delete e[a.name],!1):(t[r]=a,a);return!s&&(t.push(a),a)}return!s&&(e[a.name]=[a],e[a.name])},this.getCookie=function(i,a){var n,o;if(t=e[i])for(o=0;o<t.length;o+=1)if((n=t[o]).expiration_date<=Date.now())0===t.length&&delete e[n.name];else if(n.matches(a))return n},this.getCookies=function(t){var i,a,n=[];for(i in e)(a=this.getCookie(i,t))&&n.push(a);return n.toString=function(){return n.join(":")},n.toValueString=function(){return n.map((function(e){return e.toValueString()})).join("; ")},n},this):new n}i.prototype.parse=function(e,t,a){if(this instanceof i){var n,o=e.split(";").filter((function(e){return!!e})),s=o[0].match(/([^=]+)=([\s\S]*)/);if(!s)return void console.warn("Invalid cookie header encountered. Header: '"+e+"'");var r=s[1],c=s[2];if("string"!=typeof r||0===r.length||"string"!=typeof c)return void console.warn("Unable to extract values from cookie header. Cookie: '"+e+"'");for(this.name=r,this.value=c,n=1;n<o.length;n+=1)switch(r=(s=o[n].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(),c=s[2],r){case"httponly":this.noscript=!0;break;case"expires":this.expiration_date=c?Number(Date.parse(c)):1/0;break;case"path":this.path=c?c.trim():"",this.explicit_path=!0;break;case"domain":this.domain=c?c.trim():"",this.explicit_domain=!!this.domain;break;case"secure":this.secure=!0}return this.explicit_path||(this.path=a||"/"),this.explicit_domain||(this.domain=t),this}return(new i).parse(e,t,a)},i.prototype.matches=function(t){return t===e.All||!(this.noscript&&t.script||this.secure&&!t.secure||!this.collidesWith(t))},i.prototype.collidesWith=function(e){if(this.path&&!e.path||this.domain&&!e.domain)return!1;if(this.path&&0!==e.path.indexOf(this.path))return!1;if(this.explicit_path&&0!==e.path.indexOf(this.path))return!1;var t=e.domain&&e.domain.replace(/^[\.]/,""),i=this.domain&&this.domain.replace(/^[\.]/,"");if(i===t)return!0;if(i){if(!this.explicit_domain)return!1;var a=t.indexOf(i);return-1!==a&&a===t.length-i.length}return!0},t.CookieJar=n,n.prototype.setCookies=function(e,t,n){var o,s,r=[];for(e=(e=Array.isArray(e)?e:e.split(a)).map((function(e){return new i(e,t,n)})),o=0;o<e.length;o+=1)s=e[o],this.setCookie(s,t,n)&&r.push(s);return r}}()},1227:(e,t,i)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const i="color: "+this.color;t.splice(1,0,i,"color: inherit");let a=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(a++,"%c"===e&&(n=a))})),t.splice(n,0,i)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=i(2447)(t);const{formatters:a}=e.exports;a.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,i)=>{e.exports=function(e){function t(e){let i,n,o,s=null;function r(...e){if(!r.enabled)return;const a=r,n=Number(new Date),o=n-(i||n);a.diff=o,a.prev=i,a.curr=n,i=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((i,n)=>{if("%%"===i)return"%";s++;const o=t.formatters[n];if("function"==typeof o){const t=e[s];i=o.call(a,t),e.splice(s,1),s--}return i})),t.formatArgs.call(a,e);(a.log||t.log).apply(a,e)}return r.namespace=e,r.useColors=t.useColors(),r.color=t.selectColor(e),r.extend=a,r.destroy=t.destroy,Object.defineProperty(r,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(n!==t.namespaces&&(n=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(r),r}function a(e,i){const a=t(this.namespace+(void 0===i?":":i)+e);return a.log=this.log,a}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let i;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const a=("string"==typeof e?e:"").split(/[\s,]+/),n=a.length;for(i=0;i<n;i++)a[i]&&("-"===(e=a[i].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let i,a;for(i=0,a=t.skips.length;i<a;i++)if(t.skips[i].test(e))return!1;for(i=0,a=t.names.length;i<a;i++)if(t.names[i].test(e))return!0;return!1},t.humanize=i(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((i=>{t[i]=e[i]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let i=0;for(let t=0;t<e.length;t++)i=(i<<5)-i+e.charCodeAt(t),i|=0;return t.colors[Math.abs(i)%t.colors.length]},t.enable(t.load()),t}},5158:(e,t,i)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=i(1227):e.exports=i(39)},39:(e,t,i)=>{const a=i(6224),n=i(3837);t.init=function(e){e.inspectOpts={};const i=Object.keys(t.inspectOpts);for(let a=0;a<i.length;a++)e.inspectOpts[i[a]]=t.inspectOpts[i[a]]},t.log=function(...e){return process.stderr.write(n.format(...e)+"\n")},t.formatArgs=function(i){const{namespace:a,useColors:n}=this;if(n){const t=this.color,n="[3"+(t<8?t:"8;5;"+t),o=`  ${n};1m${a} [0m`;i[0]=o+i[0].split("\n").join("\n"+o),i.push(n+"m+"+e.exports.humanize(this.diff)+"[0m")}else i[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+a+" "+i[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):a.isatty(process.stderr.fd)},t.destroy=n.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),t.colors=[6,2,3,4,5,1];try{const e=i(2130);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,t)=>{const i=t.substring(6).toLowerCase().replace(/_([a-z])/g,((e,t)=>t.toUpperCase()));let a=process.env[t];return a=!!/^(yes|on|true|enabled)$/i.test(a)||!/^(no|off|false|disabled)$/i.test(a)&&("null"===a?null:Number(a)),e[i]=a,e}),{}),e.exports=i(2447)(t);const{formatters:o}=e.exports;o.o=function(e){return this.inspectOpts.colors=this.useColors,n.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,n.inspect(e,this.inspectOpts)}},3463:(e,t,i)=>{var a=i(2781).Stream,n=i(3837);function o(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=o,n.inherits(o,a),o.create=function(e,t){var i=new this;for(var a in t=t||{})i[a]=t[a];i.source=e;var n=e.emit;return e.emit=function(){return i._handleEmit(arguments),n.apply(e,arguments)},e.on("error",(function(){})),i.pauseStream&&e.pause(),i},Object.defineProperty(o.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),o.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},o.prototype.resume=function(){this._released||this.release(),this.source.resume()},o.prototype.pause=function(){this.source.pause()},o.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},o.prototype.pipe=function(){var e=a.prototype.pipe.apply(this,arguments);return this.resume(),e},o.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},o.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},9115:(e,t,i)=>{var a=i(2479);e.exports=a((function(e){var t=!0;return n((function(){t=!1})),function(){var i=arguments,a=this;t?n((function(){e.apply(a,i)})):e.apply(a,i)}}));var n=i(579)},4445:e=>{e.exports=s,s.default=s,s.stable=l,s.stableStringify=l;var t="[...]",i="[Circular]",a=[],n=[];function o(){return{depthLimit:Number.MAX_SAFE_INTEGER,edgesLimit:Number.MAX_SAFE_INTEGER}}function s(e,t,i,s){var r;void 0===s&&(s=o()),c(e,"",0,[],void 0,0,s);try{r=0===n.length?JSON.stringify(e,t,i):JSON.stringify(e,d(t),i)}catch(e){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==a.length;){var p=a.pop();4===p.length?Object.defineProperty(p[0],p[1],p[3]):p[0][p[1]]=p[2]}}return r}function r(e,t,i,o){var s=Object.getOwnPropertyDescriptor(o,i);void 0!==s.get?s.configurable?(Object.defineProperty(o,i,{value:e}),a.push([o,i,t,s])):n.push([t,i,e]):(o[i]=e,a.push([o,i,t]))}function c(e,a,n,o,s,p,l){var u;if(p+=1,"object"==typeof e&&null!==e){for(u=0;u<o.length;u++)if(o[u]===e)return void r(i,e,a,s);if(void 0!==l.depthLimit&&p>l.depthLimit)return void r(t,e,a,s);if(void 0!==l.edgesLimit&&n+1>l.edgesLimit)return void r(t,e,a,s);if(o.push(e),Array.isArray(e))for(u=0;u<e.length;u++)c(e[u],u,u,o,e,p,l);else{var d=Object.keys(e);for(u=0;u<d.length;u++){var m=d[u];c(e[m],m,u,o,e,p,l)}}o.pop()}}function p(e,t){return e<t?-1:e>t?1:0}function l(e,t,i,s){void 0===s&&(s=o());var r,c=u(e,"",0,[],void 0,0,s)||e;try{r=0===n.length?JSON.stringify(c,t,i):JSON.stringify(c,d(t),i)}catch(e){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==a.length;){var p=a.pop();4===p.length?Object.defineProperty(p[0],p[1],p[3]):p[0][p[1]]=p[2]}}return r}function u(e,n,o,s,c,l,d){var m;if(l+=1,"object"==typeof e&&null!==e){for(m=0;m<s.length;m++)if(s[m]===e)return void r(i,e,n,c);try{if("function"==typeof e.toJSON)return}catch(e){return}if(void 0!==d.depthLimit&&l>d.depthLimit)return void r(t,e,n,c);if(void 0!==d.edgesLimit&&o+1>d.edgesLimit)return void r(t,e,n,c);if(s.push(e),Array.isArray(e))for(m=0;m<e.length;m++)u(e[m],m,m,s,e,l,d);else{var f={},h=Object.keys(e).sort(p);for(m=0;m<h.length;m++){var v=h[m];u(e[v],v,m,s,e,l,d),f[v]=e[v]}if(void 0===c)return f;a.push([c,n,e]),c[n]=f}s.pop()}}function d(e){return e=void 0!==e?e:function(e,t){return t},function(t,i){if(n.length>0)for(var a=0;a<n.length;a++){var o=n[a];if(o[1]===t&&o[0]===i){i=o[2],n.splice(a,1);break}}return e.call(this,t,i)}}},6882:(e,t,i)=>{var a=i(9779),n=i(3837),o=i(1017),s=i(3685),r=i(5687),c=i(7310).parse,p=i(7147),l=i(2781).Stream,u=i(983),d=i(9118),m=i(2275);function f(e){if(!(this instanceof f))return new f(e);for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],a.call(this),e=e||{})this[t]=e[t]}e.exports=f,n.inherits(f,a),f.LINE_BREAK="\r\n",f.DEFAULT_CONTENT_TYPE="application/octet-stream",f.prototype.append=function(e,t,i){"string"==typeof(i=i||{})&&(i={filename:i});var o=a.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),n.isArray(t))this._error(new Error("Arrays are not supported."));else{var s=this._multiPartHeader(e,t,i),r=this._multiPartFooter();o(s),o(t),o(r),this._trackLength(s,t,i)}},f.prototype._trackLength=function(e,t,i){var a=0;null!=i.knownLength?a+=+i.knownLength:Buffer.isBuffer(t)?a=t.length:"string"==typeof t&&(a=Buffer.byteLength(t)),this._valueLength+=a,this._overheadLength+=Buffer.byteLength(e)+f.LINE_BREAK.length,t&&(t.path||t.readable&&t.hasOwnProperty("httpVersion")||t instanceof l)&&(i.knownLength||this._valuesToMeasure.push(t))},f.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?t(null,e.end+1-(e.start?e.start:0)):p.stat(e.path,(function(i,a){var n;i?t(i):(n=a.size-(e.start?e.start:0),t(null,n))})):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(i){e.pause(),t(null,+i.headers["content-length"])})),e.resume()):t("Unknown stream")},f.prototype._multiPartHeader=function(e,t,i){if("string"==typeof i.header)return i.header;var a,n=this._getContentDisposition(t,i),o=this._getContentType(t,i),s="",r={"Content-Disposition":["form-data",'name="'+e+'"'].concat(n||[]),"Content-Type":[].concat(o||[])};for(var c in"object"==typeof i.header&&m(r,i.header),r)r.hasOwnProperty(c)&&null!=(a=r[c])&&(Array.isArray(a)||(a=[a]),a.length&&(s+=c+": "+a.join("; ")+f.LINE_BREAK));return"--"+this.getBoundary()+f.LINE_BREAK+s+f.LINE_BREAK},f.prototype._getContentDisposition=function(e,t){var i,a;return"string"==typeof t.filepath?i=o.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?i=o.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(i=o.basename(e.client._httpMessage.path||"")),i&&(a='filename="'+i+'"'),a},f.prototype._getContentType=function(e,t){var i=t.contentType;return!i&&e.name&&(i=u.lookup(e.name)),!i&&e.path&&(i=u.lookup(e.path)),!i&&e.readable&&e.hasOwnProperty("httpVersion")&&(i=e.headers["content-type"]),i||!t.filepath&&!t.filename||(i=u.lookup(t.filepath||t.filename)),i||"object"!=typeof e||(i=f.DEFAULT_CONTENT_TYPE),i},f.prototype._multiPartFooter=function(){return function(e){var t=f.LINE_BREAK;0===this._streams.length&&(t+=this._lastBoundary()),e(t)}.bind(this)},f.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+f.LINE_BREAK},f.prototype.getHeaders=function(e){var t,i={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(i[t.toLowerCase()]=e[t]);return i},f.prototype.setBoundary=function(e){this._boundary=e},f.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},f.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),t=this.getBoundary(),i=0,a=this._streams.length;i<a;i++)"function"!=typeof this._streams[i]&&(e=Buffer.isBuffer(this._streams[i])?Buffer.concat([e,this._streams[i]]):Buffer.concat([e,Buffer.from(this._streams[i])]),"string"==typeof this._streams[i]&&this._streams[i].substring(2,t.length+2)===t||(e=Buffer.concat([e,Buffer.from(f.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])},f.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},f.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},f.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},f.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;this._streams.length&&(t+=this._lastBoundary().length),this._valuesToMeasure.length?d.parallel(this._valuesToMeasure,this._lengthRetriever,(function(i,a){i?e(i):(a.forEach((function(e){t+=e})),e(null,t))})):process.nextTick(e.bind(this,null,t))},f.prototype.submit=function(e,t){var i,a,n={method:"post"};return"string"==typeof e?(e=c(e),a=m({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},n)):(a=m(e,n)).port||(a.port="https:"==a.protocol?443:80),a.headers=this.getHeaders(e.headers),i="https:"==a.protocol?r.request(a):s.request(a),this.getLength(function(e,a){if(e&&"Unknown stream"!==e)this._error(e);else if(a&&i.setHeader("Content-Length",a),this.pipe(i),t){var n,o=function(e,a){return i.removeListener("error",o),i.removeListener("response",n),t.call(this,e,a)};n=o.bind(this,null),i.on("error",o),i.on("response",n)}}.bind(this)),i},f.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},f.prototype.toString=function(){return"[object FormData]"}},2275:e=>{e.exports=function(e,t){return Object.keys(t).forEach((function(i){e[i]=e[i]||t[i]})),e}},4030:(e,t,i)=>{"use strict";var a=String.prototype.replace,n=/%20/g,o=i(681),s={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=o.assign({default:s.RFC3986,formatters:{RFC1738:function(e){return a.call(e,n,"+")},RFC3986:function(e){return String(e)}}},s)},7429:(e,t,i)=>{"use strict";var a=i(328),n=i(4002),o=i(4030);e.exports={formats:o,parse:n,stringify:a}},4002:(e,t,i)=>{"use strict";var a=i(681),n=Object.prototype.hasOwnProperty,o=Array.isArray,s={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:a.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},r=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},p=function(e,t){if(o(e)){for(var i=[],a=0;a<e.length;a+=1)i.push(t(e[a]));return i}return t(e)},l=function(e,t,i,a){if(e){var o=i.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,r=i.depth>0&&/(\[[^[\]]*])/.exec(o),p=r?o.slice(0,r.index):o,l=[];if(p){if(!i.plainObjects&&n.call(Object.prototype,p)&&!i.allowPrototypes)return;l.push(p)}for(var u=0;i.depth>0&&null!==(r=s.exec(o))&&u<i.depth;){if(u+=1,!i.plainObjects&&n.call(Object.prototype,r[1].slice(1,-1))&&!i.allowPrototypes)return;l.push(r[1])}return r&&l.push("["+o.slice(r.index)+"]"),function(e,t,i,a){for(var n=a?t:c(t,i),o=e.length-1;o>=0;--o){var s,r=e[o];if("[]"===r&&i.parseArrays)s=[].concat(n);else{s=i.plainObjects?Object.create(null):{};var p="["===r.charAt(0)&&"]"===r.charAt(r.length-1)?r.slice(1,-1):r,l=parseInt(p,10);i.parseArrays||""!==p?!isNaN(l)&&r!==p&&String(l)===p&&l>=0&&i.parseArrays&&l<=i.arrayLimit?(s=[])[l]=n:s[p]=n:s={0:n}}n=s}return n}(l,t,i,a)}};e.exports=function(e,t){var i=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||a.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return i.plainObjects?Object.create(null):{};for(var u="string"==typeof e?function(e,t){var i,l={},u=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,d=t.parameterLimit===1/0?void 0:t.parameterLimit,m=u.split(t.delimiter,d),f=-1,h=t.charset;if(t.charsetSentinel)for(i=0;i<m.length;++i)0===m[i].indexOf("utf8=")&&("utf8=%E2%9C%93"===m[i]?h="utf-8":"utf8=%26%2310003%3B"===m[i]&&(h="iso-8859-1"),f=i,i=m.length);for(i=0;i<m.length;++i)if(i!==f){var v,x,g=m[i],b=g.indexOf("]="),y=-1===b?g.indexOf("="):b+1;-1===y?(v=t.decoder(g,s.decoder,h,"key"),x=t.strictNullHandling?null:""):(v=t.decoder(g.slice(0,y),s.decoder,h,"key"),x=p(c(g.slice(y+1),t),(function(e){return t.decoder(e,s.decoder,h,"value")}))),x&&t.interpretNumericEntities&&"iso-8859-1"===h&&(x=r(x)),g.indexOf("[]=")>-1&&(x=o(x)?[x]:x),n.call(l,v)?l[v]=a.combine(l[v],x):l[v]=x}return l}(e,i):e,d=i.plainObjects?Object.create(null):{},m=Object.keys(u),f=0;f<m.length;++f){var h=m[f],v=l(h,u[h],i,"string"==typeof e);d=a.merge(d,v,i)}return a.compact(d)}},328:(e,t,i)=>{"use strict";var a=i(681),n=i(4030),o=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},r=Array.isArray,c=Array.prototype.push,p=function(e,t){c.apply(e,r(t)?t:[t])},l=Date.prototype.toISOString,u=n.default,d={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:a.encode,encodeValuesOnly:!1,format:u,formatter:n.formatters[u],indices:!1,serializeDate:function(e){return l.call(e)},skipNulls:!1,strictNullHandling:!1},m=function e(t,i,n,o,s,c,l,u,m,f,h,v,x){var g,b=t;if("function"==typeof l?b=l(i,b):b instanceof Date?b=f(b):"comma"===n&&r(b)&&(b=b.join(",")),null===b){if(o)return c&&!v?c(i,d.encoder,x,"key"):i;b=""}if("string"==typeof(g=b)||"number"==typeof g||"boolean"==typeof g||"symbol"==typeof g||"bigint"==typeof g||a.isBuffer(b))return c?[h(v?i:c(i,d.encoder,x,"key"))+"="+h(c(b,d.encoder,x,"value"))]:[h(i)+"="+h(String(b))];var y,w=[];if(void 0===b)return w;if(r(l))y=l;else{var k=Object.keys(b);y=u?k.sort(u):k}for(var j=0;j<y.length;++j){var E=y[j];s&&null===b[E]||(r(b)?p(w,e(b[E],"function"==typeof n?n(i,E):i,n,o,s,c,l,u,m,f,h,v,x)):p(w,e(b[E],i+(m?"."+E:"["+E+"]"),n,o,s,c,l,u,m,f,h,v,x)))}return w};e.exports=function(e,t){var i,a=e,c=function(e){if(!e)return d;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||d.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var i=n.default;if(void 0!==e.format){if(!o.call(n.formatters,e.format))throw new TypeError("Unknown format option provided.");i=e.format}var a=n.formatters[i],s=d.filter;return("function"==typeof e.filter||r(e.filter))&&(s=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:d.addQueryPrefix,allowDots:void 0===e.allowDots?d.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:d.charsetSentinel,delimiter:void 0===e.delimiter?d.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:d.encode,encoder:"function"==typeof e.encoder?e.encoder:d.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:d.encodeValuesOnly,filter:s,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:d.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:d.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:d.strictNullHandling}}(t);"function"==typeof c.filter?a=(0,c.filter)("",a):r(c.filter)&&(i=c.filter);var l,u=[];if("object"!=typeof a||null===a)return"";l=t&&t.arrayFormat in s?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var f=s[l];i||(i=Object.keys(a)),c.sort&&i.sort(c.sort);for(var h=0;h<i.length;++h){var v=i[h];c.skipNulls&&null===a[v]||p(u,m(a[v],v,f,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.formatter,c.encodeValuesOnly,c.charset))}var x=u.join(c.delimiter),g=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?g+="utf8=%26%2310003%3B&":g+="utf8=%E2%9C%93&"),x.length>0?g+x:""}},681:e=>{"use strict";var t=Object.prototype.hasOwnProperty,i=Array.isArray,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),n=function(e,t){for(var i=t&&t.plainObjects?Object.create(null):{},a=0;a<e.length;++a)void 0!==e[a]&&(i[a]=e[a]);return i};e.exports={arrayToObject:n,assign:function(e,t){return Object.keys(t).reduce((function(e,i){return e[i]=t[i],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],a=[],n=0;n<t.length;++n)for(var o=t[n],s=o.obj[o.prop],r=Object.keys(s),c=0;c<r.length;++c){var p=r[c],l=s[p];"object"==typeof l&&null!==l&&-1===a.indexOf(l)&&(t.push({obj:s,prop:p}),a.push(l))}return function(e){for(;e.length>1;){var t=e.pop(),a=t.obj[t.prop];if(i(a)){for(var n=[],o=0;o<a.length;++o)void 0!==a[o]&&n.push(a[o]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,i){var a=e.replace(/\+/g," ");if("iso-8859-1"===i)return a.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(a)}catch(e){return a}},encode:function(e,t,i){if(0===e.length)return e;var n=e;if("symbol"==typeof e?n=Symbol.prototype.toString.call(e):"string"!=typeof e&&(n=String(e)),"iso-8859-1"===i)return escape(n).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var o="",s=0;s<n.length;++s){var r=n.charCodeAt(s);45===r||46===r||95===r||126===r||r>=48&&r<=57||r>=65&&r<=90||r>=97&&r<=122?o+=n.charAt(s):r<128?o+=a[r]:r<2048?o+=a[192|r>>6]+a[128|63&r]:r<55296||r>=57344?o+=a[224|r>>12]+a[128|r>>6&63]+a[128|63&r]:(s+=1,r=65536+((1023&r)<<10|1023&n.charCodeAt(s)),o+=a[240|r>>18]+a[128|r>>12&63]+a[128|r>>6&63]+a[128|63&r])}return o},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(a,o,s){if(!o)return a;if("object"!=typeof o){if(i(a))a.push(o);else{if(!a||"object"!=typeof a)return[a,o];(s&&(s.plainObjects||s.allowPrototypes)||!t.call(Object.prototype,o))&&(a[o]=!0)}return a}if(!a||"object"!=typeof a)return[a].concat(o);var r=a;return i(a)&&!i(o)&&(r=n(a,s)),i(a)&&i(o)?(o.forEach((function(i,n){if(t.call(a,n)){var o=a[n];o&&"object"==typeof o&&i&&"object"==typeof i?a[n]=e(o,i,s):a.push(i)}else a[n]=i})),a):Object.keys(o).reduce((function(i,a){var n=o[a];return t.call(i,a)?i[a]=e(i[a],n,s):i[a]=n,i}),r)}}},5636:(e,t,i)=>{"use strict";const a=i(2037),n=i(1017),o=i(277),s=i(778),r=i(9115),{EventEmitter:c}=i(2361),{StringDecoder:p}=i(1576),l=i(7429),u=o(25),d={maxFields:1e3,maxFieldsSize:20971520,maxFileSize:209715200,minFileSize:1,allowEmptyFiles:!0,keepExtensions:!1,encoding:"utf-8",hashAlgorithm:!1,uploadDir:a.tmpdir(),multiples:!1,enabledPlugins:["octetstream","querystring","multipart","json"],fileWriteStreamHandler:null,defaultInvalidName:"invalid-name",filter:function(){return!0}},m=i(4857),f=i(2097),h=i(4854),v=i(5036),x=i(3808),{FormidableError:g}=x;class IncomingForm extends c{constructor(e={}){super(),this.options={...d,...e};const t=n.resolve(this.options.uploadDir||this.options.uploaddir||a.tmpdir());if(this.uploaddir=t,this.uploadDir=t,["error","headers","type","bytesExpected","bytesReceived","_parser"].forEach((e=>{this[e]=null})),this._setUpRename(),this._flushing=0,this._fieldsSize=0,this._fileSize=0,this._plugins=[],this.openedFiles=[],this.options.enabledPlugins=[].concat(this.options.enabledPlugins).filter(Boolean),0===this.options.enabledPlugins.length)throw new g("expect at least 1 enabled builtin plugin, see options.enabledPlugins",x.missingPlugin);this.options.enabledPlugins.forEach((e=>{const t=e.toLowerCase();this.use(i(1839)(n.join(__dirname,"plugins",`${t}.js`)))})),this._setUpMaxFields()}use(e){if("function"!=typeof e)throw new g(".use: expect `plugin` to be a function",x.pluginFunction);return this._plugins.push(e.bind(this)),this}parse(e,t){if(this.pause=()=>{try{e.pause()}catch(e){return this.ended||this._error(e),!1}return!0},this.resume=()=>{try{e.resume()}catch(e){return this.ended||this._error(e),!1}return!0},t){const e=s(r(t)),i={};let a="";const n={};this.on("field",((e,t)=>{if(!this.options.multiples||"multipart"!==this.type&&"urlencoded"!==this.type)i[e]=t;else{const i={[e]:t};a=a?`${a}&${l.stringify(i)}`:`${l.stringify(i)}`}})),this.on("file",((e,t)=>{var i,a;this.options.multiples?(i=n,a=e,Object.prototype.hasOwnProperty.call(i,a)?(Array.isArray(n[e])||(n[e]=[n[e]]),n[e].push(t)):n[e]=t):n[e]=t})),this.on("error",(t=>{e(t,i,n)})),this.on("end",(()=>{this.options.multiples&&Object.assign(i,l.parse(a)),e(null,i,n)}))}return this.writeHeaders(e.headers),e.on("error",(e=>{this._error(e)})).on("aborted",(()=>{this.emit("aborted"),this._error(new g("Request aborted",x.aborted))})).on("data",(e=>{try{this.write(e)}catch(e){this._error(e)}})).on("end",(()=>{this.error||(this._parser&&this._parser.end(),this._maybeEnd())})),this}writeHeaders(e){this.headers=e,this._parseContentLength(),this._parseContentType(),this._parser?this._parser.once("error",(e=>{this._error(e)})):this._error(new g("no parser found",x.noParser,415))}write(e){return this.error?null:this._parser?(this.bytesReceived+=e.length,this.emit("progress",this.bytesReceived,this.bytesExpected),this._parser.write(e),this.bytesReceived):(this._error(new g("uninitialized parser",x.uninitializedParser)),null)}pause(){return!1}resume(){return!1}onPart(e){this._handlePart(e)}_handlePart(e){if(e.originalFilename&&"string"!=typeof e.originalFilename)return void this._error(new g("the part.originalFilename should be string when it exists",x.filenameNotString));if(!e.mimetype){let t="";const i=new p(e.transferEncoding||this.options.encoding);return e.on("data",(e=>{this._fieldsSize+=e.length,this._fieldsSize>this.options.maxFieldsSize?this._error(new g(`options.maxFieldsSize (${this.options.maxFieldsSize} bytes) exceeded, received ${this._fieldsSize} bytes of field data`,x.maxFieldsSizeExceeded,413)):t+=i.write(e)})),void e.on("end",(()=>{this.emit("field",e.name,t)}))}if(!this.options.filter(e))return;this._flushing+=1;const t=this._getNewName(e),i=this._joinDirectoryName(t),a=this._newFile({newFilename:t,filepath:i,originalFilename:e.originalFilename,mimetype:e.mimetype});a.on("error",(e=>{this._error(e)})),this.emit("fileBegin",e.name,a),a.open(),this.openedFiles.push(a),e.on("data",(e=>{this._fileSize+=e.length,this._fileSize<this.options.minFileSize?this._error(new g(`options.minFileSize (${this.options.minFileSize} bytes) inferior, received ${this._fileSize} bytes of file data`,x.smallerThanMinFileSize,400)):this._fileSize>this.options.maxFileSize?this._error(new g(`options.maxFileSize (${this.options.maxFileSize} bytes) exceeded, received ${this._fileSize} bytes of file data`,x.biggerThanMaxFileSize,413)):0!==e.length&&(this.pause(),a.write(e,(()=>{this.resume()})))})),e.on("end",(()=>{this.options.allowEmptyFiles||0!==this._fileSize?a.end((()=>{this._flushing-=1,this.emit("file",e.name,a),this._maybeEnd()})):this._error(new g("options.allowEmptyFiles is false, file size should be greather than 0",x.noEmptyFiles,400))}))}_parseContentType(){if(0===this.bytesExpected)return void(this._parser=new h(this,this.options));if(!this.headers["content-type"])return void this._error(new g("bad content-type header, no content-type",x.missingContentType,400));const e=[];new h(this,this.options);for(let t=0;t<this._plugins.length;t++){const i=this._plugins[t];let a=null;try{a=i(this,this.options)||this}catch(e){const i=new g(`plugin on index ${t} failed with: ${e.message}`,x.pluginFailed,500);throw i.idx=t,i}Object.assign(this,a),this.emit("plugin",t,a),e.push(a)}this.emit("pluginsResults",e)}_error(e,t="error"){this.error||this.ended||(this.error=e,this.emit(t,e),Array.isArray(this.openedFiles)&&this.openedFiles.forEach((e=>{e.destroy()})))}_parseContentLength(){this.bytesReceived=0,this.headers["content-length"]?this.bytesExpected=parseInt(this.headers["content-length"],10):void 0===this.headers["transfer-encoding"]&&(this.bytesExpected=0),null!==this.bytesExpected&&this.emit("progress",this.bytesReceived,this.bytesExpected)}_newParser(){return new v(this.options)}_newFile({filepath:e,originalFilename:t,mimetype:i,newFilename:a}){return this.options.fileWriteStreamHandler?new f({newFilename:a,filepath:e,originalFilename:t,mimetype:i,createFileWriteStream:this.options.fileWriteStreamHandler,hashAlgorithm:this.options.hashAlgorithm}):new m({newFilename:a,filepath:e,originalFilename:t,mimetype:i,hashAlgorithm:this.options.hashAlgorithm})}_getFileName(e){const t=e.match(/\bfilename=("(.*?)"|([^()<>{}[\]@,;:"?=\s/\t]+))($|;\s)/i);if(!t)return null;const i=t[2]||t[3]||"";let a=i.substr(i.lastIndexOf("\\")+1);return a=a.replace(/%22/g,'"'),a=a.replace(/&#([\d]{4});/g,((e,t)=>String.fromCharCode(t))),a}_getExtension(e){if(!e)return"";const t=n.basename(e),i=t.indexOf("."),a=t.lastIndexOf("."),o=n.extname(t).replace(/(\.[a-z0-9]+).*/i,"$1");return i===a?o:t.slice(i,a)+o}_joinDirectoryName(e){const t=n.join(this.uploadDir,e);return t.startsWith(this.uploadDir)?t:n.join(this.uploadDir,this.options.defaultInvalidName)}_setUpRename(){const e="function"==typeof this.options.filename;this._getNewName=e?e=>{let t="",i=this.options.defaultInvalidName;return e.originalFilename&&(({ext:t,name:i}=n.parse(e.originalFilename)),!0!==this.options.keepExtensions&&(t="")),this.options.filename.call(this,i,t,e,this)}:e=>{const t=u();if(e&&this.options.keepExtensions){const i="string"==typeof e?e:e.originalFilename;return`${t}${this._getExtension(i)}`}return t}}_setUpMaxFields(){if(0!==this.options.maxFields){let e=0;this.on("field",(()=>{e+=1,e>this.options.maxFields&&this._error(new g(`options.maxFields (${this.options.maxFields}) exceeded`,x.maxFieldsExceeded,413))}))}}_maybeEnd(){!this.ended||this._flushing||this.error||this.emit("end")}}IncomingForm.DEFAULT_OPTIONS=d,e.exports=IncomingForm},3808:e=>{const t=class extends Error{constructor(e,t,i=500){super(e),this.code=t,this.httpCode=i}};e.exports={missingPlugin:1e3,pluginFunction:1001,aborted:1002,noParser:1003,uninitializedParser:1004,filenameNotString:1005,maxFieldsSizeExceeded:1006,maxFieldsExceeded:1007,smallerThanMinFileSize:1008,biggerThanMaxFileSize:1009,noEmptyFiles:1010,missingContentType:1011,malformedMultipart:1012,missingMultipartBoundary:1013,unknownTransferEncoding:1014,FormidableError:t}},4857:(e,t,i)=>{"use strict";const a=i(7147),n=i(6113),{EventEmitter:o}=i(2361);e.exports=class PersistentFile extends o{constructor({filepath:e,newFilename:t,originalFilename:i,mimetype:a,hashAlgorithm:o}){super(),this.lastModifiedDate=null,Object.assign(this,{filepath:e,newFilename:t,originalFilename:i,mimetype:a,hashAlgorithm:o}),this.size=0,this._writeStream=null,"string"==typeof this.hashAlgorithm?this.hash=n.createHash(this.hashAlgorithm):this.hash=null}open(){this._writeStream=new a.WriteStream(this.filepath),this._writeStream.on("error",(e=>{this.emit("error",e)}))}toJSON(){const e={size:this.size,filepath:this.filepath,newFilename:this.newFilename,mimetype:this.mimetype,mtime:this.lastModifiedDate,length:this.length,originalFilename:this.originalFilename};return this.hash&&""!==this.hash&&(e.hash=this.hash),e}toString(){return`PersistentFile: ${this._file.newFilename}, Original: ${this._file.originalFilename}, Path: ${this._file.filepath}`}write(e,t){this.hash&&this.hash.update(e),this._writeStream.closed?t():this._writeStream.write(e,(()=>{this.lastModifiedDate=new Date,this.size+=e.length,this.emit("progress",this.size),t()}))}end(e){this.hash&&(this.hash=this.hash.digest("hex")),this._writeStream.end((()=>{this.emit("end"),e()}))}destroy(){this._writeStream.destroy(),a.unlink(this.filepath,(()=>{}))}}},2097:(e,t,i)=>{"use strict";const a=i(6113),{EventEmitter:n}=i(2361);e.exports=class VolatileFile extends n{constructor({filepath:e,newFilename:t,originalFilename:i,mimetype:n,hashAlgorithm:o,createFileWriteStream:s}){super(),this.lastModifiedDate=null,Object.assign(this,{filepath:e,newFilename:t,originalFilename:i,mimetype:n,hashAlgorithm:o,createFileWriteStream:s}),this.size=0,this._writeStream=null,"string"==typeof this.hashAlgorithm?this.hash=a.createHash(this.hashAlgorithm):this.hash=null}open(){this._writeStream=this.createFileWriteStream(this),this._writeStream.on("error",(e=>{this.emit("error",e)}))}destroy(){this._writeStream.destroy()}toJSON(){const e={size:this.size,newFilename:this.newFilename,length:this.length,originalFilename:this.originalFilename,mimetype:this.mimetype};return this.hash&&""!==this.hash&&(e.hash=this.hash),e}toString(){return`VolatileFile: ${this.originalFilename}`}write(e,t){this.hash&&this.hash.update(e),this._writeStream.closed||this._writeStream.destroyed?t():this._writeStream.write(e,(()=>{this.size+=e.length,this.emit("progress",this.size),t()}))}end(e){this.hash&&(this.hash=this.hash.digest("hex")),this._writeStream.end((()=>{this.emit("end"),e()}))}}},2616:(e,t,i)=>{"use strict";const a=i(4857),n=i(2097),o=i(5636),s=i(3808),r=i(2459),c=i(3664),p=(...e)=>new o(...e);e.exports=Object.assign(p,{errors:s,File:a,PersistentFile:a,VolatileFile:n,Formidable:o,formidable:p,IncomingForm:o,...c,parsers:c,defaultOptions:o.DEFAULT_OPTIONS,enabledPlugins:o.DEFAULT_OPTIONS.enabledPlugins,plugins:{...r}})},4854:(e,t,i)=>{"use strict";const{Transform:a}=i(2781);e.exports=class DummyParser extends a{constructor(e,t={}){super(),this.globalOptions={...t},this.incomingForm=e}_flush(e){this.incomingForm.ended=!0,this.incomingForm._maybeEnd(),e()}}},3762:(e,t,i)=>{"use strict";const{Transform:a}=i(2781);e.exports=class JSONParser extends a{constructor(e={}){super({readableObjectMode:!0}),this.chunks=[],this.globalOptions={...e}}_transform(e,t,i){this.chunks.push(String(e)),i()}_flush(e){try{const e=JSON.parse(this.chunks.join(""));Object.keys(e).forEach((t=>{const i=e[t];this.push({key:t,value:i})}))}catch(t){return void e(t)}this.chunks=null,e()}}},5036:(e,t,i)=>{"use strict";const{Transform:a}=i(2781),n=i(3808),{FormidableError:o}=n;let s=0;const r={PARSER_UNINITIALIZED:s++,START:s++,START_BOUNDARY:s++,HEADER_FIELD_START:s++,HEADER_FIELD:s++,HEADER_VALUE_START:s++,HEADER_VALUE:s++,HEADER_VALUE_ALMOST_DONE:s++,HEADERS_ALMOST_DONE:s++,PART_DATA_START:s++,PART_DATA:s++,PART_END:s++,END:s++};let c=1;const p=c,l=c*=2;function u(e){return 32|e}t.STATES={},Object.keys(r).forEach((e=>{t.STATES[e]=r[e]}));class MultipartParser extends a{constructor(e={}){super({readableObjectMode:!0}),this.boundary=null,this.boundaryChars=null,this.lookbehind=null,this.bufferLength=0,this.state=r.PARSER_UNINITIALIZED,this.globalOptions={...e},this.index=null,this.flags=0}_flush(e){this.state===r.HEADER_FIELD_START&&0===this.index||this.state===r.PART_DATA&&this.index===this.boundary.length?(this._handleCallback("partEnd"),this._handleCallback("end"),e()):this.state!==r.END&&e(new o(`MultipartParser.end(): stream ended unexpectedly: ${this.explain()}`,n.malformedMultipart,400))}initWithBoundary(e){this.boundary=Buffer.from(`\r\n--${e}`),this.lookbehind=Buffer.alloc(this.boundary.length+8),this.state=r.START,this.boundaryChars={};for(let e=0;e<this.boundary.length;e++)this.boundaryChars[this.boundary[e]]=!0}_handleCallback(e,t,i,a){void 0!==i&&i===a||this.push({name:e,buffer:t,start:i,end:a})}_transform(e,t,i){let a=0,n=this.index,{index:o,state:s,flags:c}=this;const{lookbehind:d,boundary:m,boundaryChars:f}=this,h=m.length,v=h-1;this.bufferLength=e.length;let x=null,g=null;const b=(e,t)=>{this[`${e}Mark`]="number"==typeof t?t:a},y=e=>{delete this[`${e}Mark`]},w=(t,i)=>{const n=`${t}Mark`;n in this&&(i?(this._handleCallback(t,e,this[n],a),y(t)):(this._handleCallback(t,e,this[n],e.length),b(t,0)))};for(a=0;a<this.bufferLength;a++)switch(x=e[a],s){case r.PARSER_UNINITIALIZED:return a;case r.START:o=0,s=r.START_BOUNDARY;case r.START_BOUNDARY:if(o===m.length-2){if(45===x)c|=l;else if(13!==x)return a;o++;break}if(o-1==m.length-2){if(c&l&&45===x)this._handleCallback("end"),s=r.END,c=0;else{if(c&l||10!==x)return a;o=0,this._handleCallback("partBegin"),s=r.HEADER_FIELD_START}break}x!==m[o+2]&&(o=-2),x===m[o+2]&&o++;break;case r.HEADER_FIELD_START:s=r.HEADER_FIELD,b("headerField"),o=0;case r.HEADER_FIELD:if(13===x){y("headerField"),s=r.HEADERS_ALMOST_DONE;break}if(o++,45===x)break;if(58===x){if(1===o)return a;w("headerField",!0),s=r.HEADER_VALUE_START;break}if(g=u(x),g<97||g>122)return a;break;case r.HEADER_VALUE_START:if(32===x)break;b("headerValue"),s=r.HEADER_VALUE;case r.HEADER_VALUE:13===x&&(w("headerValue",!0),this._handleCallback("headerEnd"),s=r.HEADER_VALUE_ALMOST_DONE);break;case r.HEADER_VALUE_ALMOST_DONE:if(10!==x)return a;s=r.HEADER_FIELD_START;break;case r.HEADERS_ALMOST_DONE:if(10!==x)return a;this._handleCallback("headersEnd"),s=r.PART_DATA_START;break;case r.PART_DATA_START:s=r.PART_DATA,b("partData");case r.PART_DATA:if(n=o,0===o){for(a+=v;a<this.bufferLength&&!(e[a]in f);)a+=h;a-=v,x=e[a]}if(o<m.length)m[o]===x?(0===o&&w("partData",!0),o++):o=0;else if(o===m.length)o++,13===x?c|=p:45===x?c|=l:o=0;else if(o-1===m.length)if(c&p){if(o=0,10===x){c&=~p,this._handleCallback("partEnd"),this._handleCallback("partBegin"),s=r.HEADER_FIELD_START;break}}else c&l&&45===x?(this._handleCallback("partEnd"),this._handleCallback("end"),s=r.END,c=0):o=0;o>0?d[o-1]=x:n>0&&(this._handleCallback("partData",d,0,n),n=0,b("partData"),a--);break;case r.END:break;default:return a}return w("headerField"),w("headerValue"),w("partData"),this.index=o,this.state=s,this.flags=c,i(),this.bufferLength}explain(){return`state = ${MultipartParser.stateToString(this.state)}`}}MultipartParser.stateToString=e=>{for(const t in r){if(r[t]===e)return t}},e.exports=Object.assign(MultipartParser,{STATES:t.STATES})},4026:(e,t,i)=>{"use strict";const{PassThrough:a}=i(2781);e.exports=class OctetStreamParser extends a{constructor(e={}){super(),this.globalOptions={...e}}}},3886:(e,t,i)=>{"use strict";const{Transform:a}=i(2781),n=i(3477);e.exports=class QuerystringParser extends a{constructor(e={}){super({readableObjectMode:!0}),this.globalOptions={...e},this.buffer="",this.bufferLength=0}_transform(e,t,i){this.buffer+=e.toString("ascii"),this.bufferLength=this.buffer.length,i()}_flush(e){const t=n.parse(this.buffer,"&","=");for(const e in t)this.push({key:e,value:t[e]});this.buffer="",e()}}},3664:(e,t,i)=>{"use strict";const a=i(3762),n=i(4854),o=i(5036),s=i(4026),r=i(3886);Object.assign(t,{JSONParser:a,DummyParser:n,MultipartParser:o,OctetStreamParser:s,OctetstreamParser:s,QueryStringParser:r,QuerystringParser:r})},2459:(e,t,i)=>{"use strict";const a=i(6446),n=i(5375),o=i(9474),s=i(8376);Object.assign(t,{octetstream:a,querystring:n,multipart:o,json:s})},8376:(e,t,i)=>{"use strict";const a=i(3762);function n(e,t){this.type="json";const i=new a(this.options);i.on("data",(({key:e,value:t})=>{this.emit("field",e,t)})),i.once("end",(()=>{this.ended=!0,this._maybeEnd()})),this._parser=i}e.exports=function(e,t){const i=this||e;/json/i.test(i.headers["content-type"])&&n.call(i,i,t)}},9474:(e,t,i)=>{"use strict";const{Stream:a}=i(2781),n=i(5036),o=i(3808),{FormidableError:s}=o;e.exports=function(e,t){const i=this||e;if(/multipart/i.test(i.headers["content-type"])){const e=i.headers["content-type"].match(/boundary=(?:"([^"]+)"|([^;]+))/i);if(e){const c=(r=e[1]||e[2],function(){this.type="multipart";const e=new n(this.options);let t,i,c;e.initWithBoundary(r),e.on("data",(({name:n,buffer:r,start:p,end:l})=>{if("partBegin"===n)c=new a,c.readable=!0,c.headers={},c.name=null,c.originalFilename=null,c.mimetype=null,c.transferEncoding=this.options.encoding,c.transferBuffer="",t="",i="";else if("headerField"===n)t+=r.toString(this.options.encoding,p,l);else if("headerValue"===n)i+=r.toString(this.options.encoding,p,l);else if("headerEnd"===n){t=t.toLowerCase(),c.headers[t]=i;const e=i.match(/\bname=("([^"]*)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))/i);"content-disposition"===t?(e&&(c.name=e[2]||e[3]||""),c.originalFilename=this._getFileName(i)):"content-type"===t?c.mimetype=i:"content-transfer-encoding"===t&&(c.transferEncoding=i.toLowerCase()),t="",i=""}else if("headersEnd"===n){switch(c.transferEncoding){case"binary":case"7bit":case"8bit":case"utf-8":{const t=e=>{"partData"===e.name&&c.emit("data",e.buffer.slice(e.start,e.end))},i=a=>{"partEnd"===a.name&&(c.emit("end"),e.off("data",t),e.off("data",i))};e.on("data",t),e.on("data",i);break}case"base64":{const t=e=>{if("partData"===e.name){c.transferBuffer+=e.buffer.slice(e.start,e.end).toString("ascii");const t=4*parseInt(c.transferBuffer.length/4,10);c.emit("data",Buffer.from(c.transferBuffer.substring(0,t),"base64")),c.transferBuffer=c.transferBuffer.substring(t)}},i=a=>{"partEnd"===a.name&&(c.emit("data",Buffer.from(c.transferBuffer,"base64")),c.emit("end"),e.off("data",t),e.off("data",i))};e.on("data",t),e.on("data",i);break}default:return this._error(new s("unknown transfer-encoding",o.unknownTransferEncoding,501))}this.onPart(c)}else"end"===n&&(this.ended=!0,this._maybeEnd())})),this._parser=e});c.call(i,i,t)}else{const e=new s("bad content-type header, no multipart boundary",o.missingMultipartBoundary,400);i._error(e)}}var r}},6446:(e,t,i)=>{"use strict";const a=i(4026);function n(e,t){this.type="octet-stream";const i=this.headers["x-file-name"],n=this.headers["content-type"],o={originalFilename:i,mimetype:n},s=this._getNewName(o),r=this._joinDirectoryName(s),c=this._newFile({newFilename:s,filepath:r,originalFilename:i,mimetype:n});this.emit("fileBegin",i,c),c.open(),this.openedFiles.push(c),this._flushing+=1,this._parser=new a(this.options);let p=0;return this._parser.on("data",(e=>{this.pause(),p+=1,c.write(e,(()=>{p-=1,this.resume(),this.ended&&this._parser.emit("doneWritingFile")}))})),this._parser.on("end",(()=>{this._flushing-=1,this.ended=!0;const e=()=>{c.end((()=>{this.emit("file","file",c),this._maybeEnd()}))};0===p?e():this._parser.once("doneWritingFile",e)})),this}e.exports=function(e,t){const i=this||e;return/octet-stream/i.test(i.headers["content-type"])&&n.call(i,i,t),i}},5375:(e,t,i)=>{"use strict";const a=i(3886);function n(e,t){this.type="urlencoded";const i=new a(this.options);return i.on("data",(({key:e,value:t})=>{this.emit("field",e,t)})),i.once("end",(()=>{this.ended=!0,this._maybeEnd()})),this._parser=i,this}e.exports=function(e,t){const i=this||e;return/urlencoded/i.test(i.headers["content-type"])&&n.call(i,i,t),i}},1839:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=1839,e.exports=t},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",i=Array.prototype.slice,a=Object.prototype.toString,n="[object Function]";e.exports=function(e){var o=this;if("function"!=typeof o||a.call(o)!==n)throw new TypeError(t+o);for(var s,r=i.call(arguments,1),c=function(){if(this instanceof s){var t=o.apply(this,r.concat(i.call(arguments)));return Object(t)===t?t:this}return o.apply(e,r.concat(i.call(arguments)))},p=Math.max(0,o.length-r.length),l=[],u=0;u<p;u++)l.push("$"+u);if(s=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(c),o.prototype){var d=function(){};d.prototype=o.prototype,s.prototype=new d,d.prototype=null}return s}},8612:(e,t,i)=>{"use strict";var a=i(7648);e.exports=Function.prototype.bind||a},210:(e,t,i)=>{"use strict";var a,n=SyntaxError,o=Function,s=TypeError,r=function(e){try{return o('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var p=function(){throw new s},l=c?function(){try{return p}catch(e){try{return c(arguments,"callee").get}catch(e){return p}}}():p,u=i(1405)(),d=Object.getPrototypeOf||function(e){return e.__proto__},m={},f="undefined"==typeof Uint8Array?a:d(Uint8Array),h={"%AggregateError%":"undefined"==typeof AggregateError?a:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?a:ArrayBuffer,"%ArrayIteratorPrototype%":u?d([][Symbol.iterator]()):a,"%AsyncFromSyncIteratorPrototype%":a,"%AsyncFunction%":m,"%AsyncGenerator%":m,"%AsyncGeneratorFunction%":m,"%AsyncIteratorPrototype%":m,"%Atomics%":"undefined"==typeof Atomics?a:Atomics,"%BigInt%":"undefined"==typeof BigInt?a:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?a:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?a:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?a:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?a:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":m,"%Int8Array%":"undefined"==typeof Int8Array?a:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?a:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?a:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u?d(d([][Symbol.iterator]())):a,"%JSON%":"object"==typeof JSON?JSON:a,"%Map%":"undefined"==typeof Map?a:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u?d((new Map)[Symbol.iterator]()):a,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?a:Promise,"%Proxy%":"undefined"==typeof Proxy?a:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?a:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?a:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u?d((new Set)[Symbol.iterator]()):a,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?a:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":u?d(""[Symbol.iterator]()):a,"%Symbol%":u?Symbol:a,"%SyntaxError%":n,"%ThrowTypeError%":l,"%TypedArray%":f,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?a:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?a:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?a:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?a:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?a:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?a:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?a:WeakSet},v=function e(t){var i;if("%AsyncFunction%"===t)i=r("async function () {}");else if("%GeneratorFunction%"===t)i=r("function* () {}");else if("%AsyncGeneratorFunction%"===t)i=r("async function* () {}");else if("%AsyncGenerator%"===t){var a=e("%AsyncGeneratorFunction%");a&&(i=a.prototype)}else if("%AsyncIteratorPrototype%"===t){var n=e("%AsyncGenerator%");n&&(i=d(n.prototype))}return h[t]=i,i},x={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},g=i(8612),b=i(7642),y=g.call(Function.call,Array.prototype.concat),w=g.call(Function.apply,Array.prototype.splice),k=g.call(Function.call,String.prototype.replace),j=g.call(Function.call,String.prototype.slice),E=g.call(Function.call,RegExp.prototype.exec),_=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,S=/\\(\\)?/g,O=function(e){var t=j(e,0,1),i=j(e,-1);if("%"===t&&"%"!==i)throw new n("invalid intrinsic syntax, expected closing `%`");if("%"===i&&"%"!==t)throw new n("invalid intrinsic syntax, expected opening `%`");var a=[];return k(e,_,(function(e,t,i,n){a[a.length]=i?k(n,S,"$1"):t||e})),a},A=function(e,t){var i,a=e;if(b(x,a)&&(a="%"+(i=x[a])[0]+"%"),b(h,a)){var o=h[a];if(o===m&&(o=v(a)),void 0===o&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:i,name:a,value:o}}throw new n("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');if(null===E(/^%?[^%]*%?$/g,e))throw new n("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var i=O(e),a=i.length>0?i[0]:"",o=A("%"+a+"%",t),r=o.name,p=o.value,l=!1,u=o.alias;u&&(a=u[0],w(i,y([0,1],u)));for(var d=1,m=!0;d<i.length;d+=1){var f=i[d],v=j(f,0,1),x=j(f,-1);if(('"'===v||"'"===v||"`"===v||'"'===x||"'"===x||"`"===x)&&v!==x)throw new n("property names with quotes must have matching quotes");if("constructor"!==f&&m||(l=!0),b(h,r="%"+(a+="."+f)+"%"))p=h[r];else if(null!=p){if(!(f in p)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&d+1>=i.length){var g=c(p,f);p=(m=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:p[f]}else m=b(p,f),p=p[f];m&&!l&&(h[r]=p)}}return p}},6560:e=>{"use strict";e.exports=(e,t)=>{t=t||process.argv;const i=e.startsWith("-")?"":1===e.length?"-":"--",a=t.indexOf(i+e),n=t.indexOf("--");return-1!==a&&(-1===n||a<n)}},1405:(e,t,i)=>{"use strict";var a="undefined"!=typeof Symbol&&Symbol,n=i(5419);e.exports=function(){return"function"==typeof a&&("function"==typeof Symbol&&("symbol"==typeof a("foo")&&("symbol"==typeof Symbol("bar")&&n())))}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),i=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(i))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var a=Object.getOwnPropertySymbols(e);if(1!==a.length||a[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var n=Object.getOwnPropertyDescriptor(e,t);if(42!==n.value||!0!==n.enumerable)return!1}return!0}},7642:(e,t,i)=>{"use strict";var a=i(8612);e.exports=a.call(Function.call,Object.prototype.hasOwnProperty)},277:e=>{for(var t=256,i=[];t--;)i[t]=(t+256).toString(16).substring(1);e.exports=function(e){e=e||16;var t="",a=0;return function(){if(!t||256===a){for(t="",a=(1+e)/2|0;a--;)t+=i[256*Math.random()|0];t=t.substring(a=0,e-2)}return t+i[a++]}}},4400:(e,t,i)=>{var a=i(4123).stringify,n=i(6813);e.exports=function(e){return{parse:n(e),stringify:a}},e.exports.parse=n(),e.exports.stringify=a},6813:(e,t,i)=>{var a=null;const n=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,o=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;e.exports=function(e){"use strict";var t={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:"error",constructorAction:"error"};if(null!=e){if(!0===e.strict&&(t.strict=!0),!0===e.storeAsString&&(t.storeAsString=!0),t.alwaysParseAsBig=!0===e.alwaysParseAsBig&&e.alwaysParseAsBig,t.useNativeBigInt=!0===e.useNativeBigInt&&e.useNativeBigInt,void 0!==e.constructorAction){if("error"!==e.constructorAction&&"ignore"!==e.constructorAction&&"preserve"!==e.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${e.constructorAction}`);t.constructorAction=e.constructorAction}if(void 0!==e.protoAction){if("error"!==e.protoAction&&"ignore"!==e.protoAction&&"preserve"!==e.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${e.protoAction}`);t.protoAction=e.protoAction}}var s,r,c,p,l={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},u=function(e){throw{name:"SyntaxError",message:e,at:s,text:c}},d=function(e){return e&&e!==r&&u("Expected '"+e+"' instead of '"+r+"'"),r=c.charAt(s),s+=1,r},m=function(){var e,n="";for("-"===r&&(n="-",d("-"));r>="0"&&r<="9";)n+=r,d();if("."===r)for(n+=".";d()&&r>="0"&&r<="9";)n+=r;if("e"===r||"E"===r)for(n+=r,d(),"-"!==r&&"+"!==r||(n+=r,d());r>="0"&&r<="9";)n+=r,d();if(e=+n,isFinite(e))return null==a&&(a=i(4431)),n.length>15?t.storeAsString?n:t.useNativeBigInt?BigInt(n):new a(n):t.alwaysParseAsBig?t.useNativeBigInt?BigInt(e):new a(e):e;u("Bad number")},f=function(){var e,t,i,a="";if('"'===r)for(var n=s;d();){if('"'===r)return s-1>n&&(a+=c.substring(n,s-1)),d(),a;if("\\"===r){if(s-1>n&&(a+=c.substring(n,s-1)),d(),"u"===r){for(i=0,t=0;t<4&&(e=parseInt(d(),16),isFinite(e));t+=1)i=16*i+e;a+=String.fromCharCode(i)}else{if("string"!=typeof l[r])break;a+=l[r]}n=s}}u("Bad string")},h=function(){for(;r&&r<=" ";)d()};return p=function(){switch(h(),r){case"{":return function(){var e,i=Object.create(null);if("{"===r){if(d("{"),h(),"}"===r)return d("}"),i;for(;r;){if(e=f(),h(),d(":"),!0===t.strict&&Object.hasOwnProperty.call(i,e)&&u('Duplicate key "'+e+'"'),!0===n.test(e)?"error"===t.protoAction?u("Object contains forbidden prototype property"):"ignore"===t.protoAction?p():i[e]=p():!0===o.test(e)?"error"===t.constructorAction?u("Object contains forbidden constructor property"):"ignore"===t.constructorAction?p():i[e]=p():i[e]=p(),h(),"}"===r)return d("}"),i;d(","),h()}}u("Bad object")}();case"[":return function(){var e=[];if("["===r){if(d("["),h(),"]"===r)return d("]"),e;for(;r;){if(e.push(p()),h(),"]"===r)return d("]"),e;d(","),h()}}u("Bad array")}();case'"':return f();case"-":return m();default:return r>="0"&&r<="9"?m():function(){switch(r){case"t":return d("t"),d("r"),d("u"),d("e"),!0;case"f":return d("f"),d("a"),d("l"),d("s"),d("e"),!1;case"n":return d("n"),d("u"),d("l"),d("l"),null}u("Unexpected '"+r+"'")}()}},function(e,t){var i;return c=e+"",s=0,r=" ",i=p(),h(),r&&u("Syntax error"),"function"==typeof t?function e(i,a){var n,o=i[a];return o&&"object"==typeof o&&Object.keys(o).forEach((function(t){void 0!==(n=e(o,t))?o[t]=n:delete o[t]})),t.call(i,a,o)}({"":i},""):i}}},4123:(e,t,i)=>{var a=i(4431),n=e.exports;!function(){"use strict";var e,t,i,o=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,s={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function r(e){return o.lastIndex=0,o.test(e)?'"'+e.replace(o,(function(e){var t=s[e];return"string"==typeof t?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'}function c(n,o){var s,p,l,u,d,m=e,f=o[n],h=null!=f&&(f instanceof a||a.isBigNumber(f));switch(f&&"object"==typeof f&&"function"==typeof f.toJSON&&(f=f.toJSON(n)),"function"==typeof i&&(f=i.call(o,n,f)),typeof f){case"string":return h?f:r(f);case"number":return isFinite(f)?String(f):"null";case"boolean":case"null":case"bigint":return String(f);case"object":if(!f)return"null";if(e+=t,d=[],"[object Array]"===Object.prototype.toString.apply(f)){for(u=f.length,s=0;s<u;s+=1)d[s]=c(s,f)||"null";return l=0===d.length?"[]":e?"[\n"+e+d.join(",\n"+e)+"\n"+m+"]":"["+d.join(",")+"]",e=m,l}if(i&&"object"==typeof i)for(u=i.length,s=0;s<u;s+=1)"string"==typeof i[s]&&(l=c(p=i[s],f))&&d.push(r(p)+(e?": ":":")+l);else Object.keys(f).forEach((function(t){var i=c(t,f);i&&d.push(r(t)+(e?": ":":")+i)}));return l=0===d.length?"{}":e?"{\n"+e+d.join(",\n"+e)+"\n"+m+"}":"{"+d.join(",")+"}",e=m,l}}"function"!=typeof n.stringify&&(n.stringify=function(a,n,o){var s;if(e="",t="","number"==typeof o)for(s=0;s<o;s+=1)t+=" ";else"string"==typeof o&&(t=o);if(i=n,n&&"function"!=typeof n&&("object"!=typeof n||"number"!=typeof n.length))throw new Error("JSON.stringify");return c("",{"":a})})}()},9593:(e,t,i)=>{"use strict";const a=i(4411),n=Symbol("max"),o=Symbol("length"),s=Symbol("lengthCalculator"),r=Symbol("allowStale"),c=Symbol("maxAge"),p=Symbol("dispose"),l=Symbol("noDisposeOnSet"),u=Symbol("lruList"),d=Symbol("cache"),m=Symbol("updateAgeOnGet"),f=()=>1;const h=(e,t,i)=>{const a=e[d].get(t);if(a){const t=a.value;if(v(e,t)){if(g(e,a),!e[r])return}else i&&(e[m]&&(a.value.now=Date.now()),e[u].unshiftNode(a));return t.value}},v=(e,t)=>{if(!t||!t.maxAge&&!e[c])return!1;const i=Date.now()-t.now;return t.maxAge?i>t.maxAge:e[c]&&i>e[c]},x=e=>{if(e[o]>e[n])for(let t=e[u].tail;e[o]>e[n]&&null!==t;){const i=t.prev;g(e,t),t=i}},g=(e,t)=>{if(t){const i=t.value;e[p]&&e[p](i.key,i.value),e[o]-=i.length,e[d].delete(i.key),e[u].removeNode(t)}};class Entry{constructor(e,t,i,a,n){this.key=e,this.value=t,this.length=i,this.now=a,this.maxAge=n||0}}const b=(e,t,i,a)=>{let n=i.value;v(e,n)&&(g(e,i),e[r]||(n=void 0)),n&&t.call(a,n.value,n.key,e)};e.exports=class LRUCache{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[n]=e.max||1/0;const t=e.length||f;if(this[s]="function"!=typeof t?f:t,this[r]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[c]=e.maxAge||0,this[p]=e.dispose,this[l]=e.noDisposeOnSet||!1,this[m]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[n]=e||1/0,x(this)}get max(){return this[n]}set allowStale(e){this[r]=!!e}get allowStale(){return this[r]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[c]=e,x(this)}get maxAge(){return this[c]}set lengthCalculator(e){"function"!=typeof e&&(e=f),e!==this[s]&&(this[s]=e,this[o]=0,this[u].forEach((e=>{e.length=this[s](e.value,e.key),this[o]+=e.length}))),x(this)}get lengthCalculator(){return this[s]}get length(){return this[o]}get itemCount(){return this[u].length}rforEach(e,t){t=t||this;for(let i=this[u].tail;null!==i;){const a=i.prev;b(this,e,i,t),i=a}}forEach(e,t){t=t||this;for(let i=this[u].head;null!==i;){const a=i.next;b(this,e,i,t),i=a}}keys(){return this[u].toArray().map((e=>e.key))}values(){return this[u].toArray().map((e=>e.value))}reset(){this[p]&&this[u]&&this[u].length&&this[u].forEach((e=>this[p](e.key,e.value))),this[d]=new Map,this[u]=new a,this[o]=0}dump(){return this[u].map((e=>!v(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[u]}set(e,t,i){if((i=i||this[c])&&"number"!=typeof i)throw new TypeError("maxAge must be a number");const a=i?Date.now():0,r=this[s](t,e);if(this[d].has(e)){if(r>this[n])return g(this,this[d].get(e)),!1;const s=this[d].get(e).value;return this[p]&&(this[l]||this[p](e,s.value)),s.now=a,s.maxAge=i,s.value=t,this[o]+=r-s.length,s.length=r,this.get(e),x(this),!0}const m=new Entry(e,t,r,a,i);return m.length>this[n]?(this[p]&&this[p](e,t),!1):(this[o]+=m.length,this[u].unshift(m),this[d].set(e,this[u].head),x(this),!0)}has(e){if(!this[d].has(e))return!1;const t=this[d].get(e).value;return!v(this,t)}get(e){return h(this,e,!0)}peek(e){return h(this,e,!1)}pop(){const e=this[u].tail;return e?(g(this,e),e.value):null}del(e){g(this,this[d].get(e))}load(e){this.reset();const t=Date.now();for(let i=e.length-1;i>=0;i--){const a=e[i],n=a.e||0;if(0===n)this.set(a.k,a.v);else{const e=n-t;e>0&&this.set(a.k,a.v,e)}}}prune(){this[d].forEach(((e,t)=>h(this,t,!1)))}}},8873:(e,t,i)=>{"use strict";var a=i(3685);e.exports=a.METHODS&&a.METHODS.map((function(e){return e.toLowerCase()}))||["get","post","put","head","delete","options","trace","copy","lock","mkcol","move","purge","propfind","proppatch","unlock","report","mkactivity","checkout","merge","m-search","notify","subscribe","unsubscribe","patch","search","connect"]},5234:(e,t,i)=>{e.exports=i(3765)},983:(e,t,i)=>{"use strict";var a,n,o,s=i(5234),r=i(1017).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),i=t&&s[t[1].toLowerCase()];return i&&i.charset?i.charset:!(!t||!p.test(t[1]))&&"UTF-8"}t.charset=l,t.charsets={lookup:l},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var i=-1===e.indexOf("/")?t.lookup(e):e;if(!i)return!1;if(-1===i.indexOf("charset")){var a=t.charset(i);a&&(i+="; charset="+a.toLowerCase())}return i},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var i=c.exec(e),a=i&&t.extensions[i[1].toLowerCase()];if(!a||!a.length)return!1;return a[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var i=r("x."+e).toLowerCase().substr(1);if(!i)return!1;return t.types[i]||!1},t.types=Object.create(null),a=t.extensions,n=t.types,o=["nginx","apache",void 0,"iana"],Object.keys(s).forEach((function(e){var t=s[e],i=t.extensions;if(i&&i.length){a[e]=i;for(var r=0;r<i.length;r++){var c=i[r];if(n[c]){var p=o.indexOf(s[n[c]].source),l=o.indexOf(t.source);if("application/octet-stream"!==n[c]&&(p>l||p===l&&"application/"===n[c].substr(0,12)))continue}n[c]=e}}}))},9146:e=>{"use strict";function t(){this._types=Object.create(null),this._extensions=Object.create(null);for(let e=0;e<arguments.length;e++)this.define(arguments[e]);this.define=this.define.bind(this),this.getType=this.getType.bind(this),this.getExtension=this.getExtension.bind(this)}t.prototype.define=function(e,t){for(let i in e){let a=e[i].map((function(e){return e.toLowerCase()}));i=i.toLowerCase();for(let e=0;e<a.length;e++){const n=a[e];if("*"!==n[0]){if(!t&&n in this._types)throw new Error('Attempt to change mapping for "'+n+'" extension from "'+this._types[n]+'" to "'+i+'". Pass `force=true` to allow this, otherwise remove "'+n+'" from the list of extensions for "'+i+'".');this._types[n]=i}}if(t||!this._extensions[i]){const e=a[0];this._extensions[i]="*"!==e[0]?e:e.substr(1)}}},t.prototype.getType=function(e){let t=(e=String(e)).replace(/^.*[/\\]/,"").toLowerCase(),i=t.replace(/^.*\./,"").toLowerCase(),a=t.length<e.length;return(i.length<t.length-1||!a)&&this._types[i]||null},t.prototype.getExtension=function(e){return(e=/^\s*([^;\s]*)/.test(e)&&RegExp.$1)&&this._extensions[e.toLowerCase()]||null},e.exports=t},3893:(e,t,i)=>{"use strict";let a=i(9146);e.exports=new a(i(4415),i(3014))},3014:e=>{e.exports={"application/prs.cww":["cww"],"application/vnd.1000minds.decision-model+xml":["1km"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.keynote":["key"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.numbers":["numbers"],"application/vnd.apple.pages":["pages"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.balsamiq.bmml+xml":["bmml"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.citationstyles.style+xml":["csl"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dbf":["dbf"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mapbox-vector-tile":["mvt"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["*stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.ac+xml":["*ac"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openblox.game+xml":["obgx"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openstreetmap.data+xml":["osm"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.rar":["rar"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.software602.filler.form+xml":["fo"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.syncml.dmddf+xml":["ddf"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["*dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["*bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["*deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["*iso"],"application/x-iwork-keynote-sffkey":["*key"],"application/x-iwork-numbers-sffnumbers":["*numbers"],"application/x-iwork-pages-sffpages":["*pages"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-keepass2":["kdbx"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["*exe"],"application/x-msdownload":["*exe","*dll","com","bat","*msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["*wmf","*wmz","*emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["*prc","*pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["*rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["*obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["*xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["*m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["*ra"],"audio/x-wav":["*wav"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"image/prs.btif":["btif"],"image/prs.pti":["pti"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.airzip.accelerator.azv":["azv"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["*sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.microsoft.icon":["ico"],"image/vnd.ms-dds":["dds"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.pco.b16":["b16"],"image/vnd.tencent.tap":["tap"],"image/vnd.valve.source.texture":["vtf"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/vnd.zbrush.pcx":["pcx"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["*ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["*bmp"],"image/x-pcx":["*pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/vnd.wfa.wsc":["wsc"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.opengex":["ogex"],"model/vnd.parasolid.transmit.binary":["x_b"],"model/vnd.parasolid.transmit.text":["x_t"],"model/vnd.sap.vds":["vds"],"model/vnd.usdz+zip":["usdz"],"model/vnd.valve.source.compiled-map":["bsp"],"model/vnd.vtu":["vtu"],"text/prs.lines.tag":["dsc"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["*org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}},4415:e=>{e.exports={"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomdeleted+xml":["atomdeleted"],"application/atomsvc+xml":["atomsvc"],"application/atsc-dwd+xml":["dwd"],"application/atsc-held+xml":["held"],"application/atsc-rsat+xml":["rsat"],"application/bdoc":["bdoc"],"application/calendar+xml":["xcs"],"application/ccxml+xml":["ccxml"],"application/cdfx+xml":["cdfx"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["es","ecma"],"application/emma+xml":["emma"],"application/emotionml+xml":["emotionml"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/express":["exp"],"application/fdt+xml":["fdt"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/its+xml":["its"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lgr+xml":["lgr"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mmt-aei+xml":["maei"],"application/mmt-usd+xml":["musd"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/node":["cjs"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/p2p-overlay+xml":["relo"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/provenance+xml":["provx"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/route-apd+xml":["rapd"],"application/route-s-tsid+xml":["sls"],"application/route-usd+xml":["rusd"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/senml+xml":["senmlx"],"application/sensml+xml":["sensmlx"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/swid+xml":["swidtag"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/toml":["toml"],"application/trig":["trig"],"application/ttml+xml":["ttml"],"application/ubjson":["ubj"],"application/urc-ressheet+xml":["rsheet"],"application/urc-targetdesc+xml":["td"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-att+xml":["xav"],"application/xcap-caps+xml":["xca"],"application/xcap-diff+xml":["xdf"],"application/xcap-el+xml":["xel"],"application/xcap-ns+xml":["xns"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xliff+xml":["xlf"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["*xsl","xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/amr":["amr"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mobile-xmf":["mxmf"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx","opus"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/avif":["avif"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/hej2k":["hej2"],"image/hsj2":["hsj2"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jph":["jph"],"image/jphc":["jhc"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/jxra":["jxra"],"image/jxrs":["jxrs"],"image/jxs":["jxs"],"image/jxsc":["jxsc"],"image/jxsi":["jxsi"],"image/jxss":["jxss"],"image/ktx":["ktx"],"image/ktx2":["ktx2"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/mtl":["mtl"],"model/obj":["obj"],"model/step+xml":["stpx"],"model/step+zip":["stpz"],"model/step-xml+zip":["stpxz"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/spdx":["spdx"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/iso.segment":["m4s"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]}},7824:e=>{var t=1e3,i=60*t,a=60*i,n=24*a,o=7*n,s=365.25*n;function r(e,t,i,a){var n=t>=1.5*i;return Math.round(e/i)+" "+a+(n?"s":"")}e.exports=function(e,c){c=c||{};var p=typeof e;if("string"===p&&e.length>0)return function(e){if((e=String(e)).length>100)return;var r=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!r)return;var c=parseFloat(r[1]);switch((r[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*s;case"weeks":case"week":case"w":return c*o;case"days":case"day":case"d":return c*n;case"hours":case"hour":case"hrs":case"hr":case"h":return c*a;case"minutes":case"minute":case"mins":case"min":case"m":return c*i;case"seconds":case"second":case"secs":case"sec":case"s":return c*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===p&&isFinite(e))return c.long?function(e){var o=Math.abs(e);if(o>=n)return r(e,o,n,"day");if(o>=a)return r(e,o,a,"hour");if(o>=i)return r(e,o,i,"minute");if(o>=t)return r(e,o,t,"second");return e+" ms"}(e):function(e){var o=Math.abs(e);if(o>=n)return Math.round(e/n)+"d";if(o>=a)return Math.round(e/a)+"h";if(o>=i)return Math.round(e/i)+"m";if(o>=t)return Math.round(e/t)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},631:(e,t,i)=>{var a="function"==typeof Map&&Map.prototype,n=Object.getOwnPropertyDescriptor&&a?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,o=a&&n&&"function"==typeof n.get?n.get:null,s=a&&Map.prototype.forEach,r="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,p=r&&c&&"function"==typeof c.get?c.get:null,l=r&&Set.prototype.forEach,u="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,d="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,m="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,f=Boolean.prototype.valueOf,h=Object.prototype.toString,v=Function.prototype.toString,x=String.prototype.match,g=String.prototype.slice,b=String.prototype.replace,y=String.prototype.toUpperCase,w=String.prototype.toLowerCase,k=RegExp.prototype.test,j=Array.prototype.concat,E=Array.prototype.join,_=Array.prototype.slice,S=Math.floor,O="function"==typeof BigInt?BigInt.prototype.valueOf:null,A=Object.getOwnPropertySymbols,T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,C="function"==typeof Symbol&&"object"==typeof Symbol.iterator,N="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===C||"symbol")?Symbol.toStringTag:null,R=Object.prototype.propertyIsEnumerable,P=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function I(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||k.call(/e/,t))return t;var i=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var a=e<0?-S(-e):S(e);if(a!==e){var n=String(a),o=g.call(t,n.length+1);return b.call(n,i,"$&_")+"."+b.call(b.call(o,/([0-9]{3})/g,"$&_"),/_$/,"")}}return b.call(t,i,"$&_")}var F=i(2794),z=F.custom,L=U(z)?z:null;function D(e,t,i){var a="double"===(i.quoteStyle||t)?'"':"'";return a+e+a}function $(e){return b.call(String(e),/"/g,"&quot;")}function q(e){return!("[object Array]"!==G(e)||N&&"object"==typeof e&&N in e)}function M(e){return!("[object RegExp]"!==G(e)||N&&"object"==typeof e&&N in e)}function U(e){if(C)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!T)return!1;try{return T.call(e),!0}catch(e){}return!1}e.exports=function e(t,i,a,n){var r=i||{};if(H(r,"quoteStyle")&&"single"!==r.quoteStyle&&"double"!==r.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(H(r,"maxStringLength")&&("number"==typeof r.maxStringLength?r.maxStringLength<0&&r.maxStringLength!==1/0:null!==r.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var c=!H(r,"customInspect")||r.customInspect;if("boolean"!=typeof c&&"symbol"!==c)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(H(r,"indent")&&null!==r.indent&&"\t"!==r.indent&&!(parseInt(r.indent,10)===r.indent&&r.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(H(r,"numericSeparator")&&"boolean"!=typeof r.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var h=r.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return W(t,r);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var y=String(t);return h?I(t,y):y}if("bigint"==typeof t){var k=String(t)+"n";return h?I(t,k):k}var S=void 0===r.depth?5:r.depth;if(void 0===a&&(a=0),a>=S&&S>0&&"object"==typeof t)return q(t)?"[Array]":"[Object]";var A=function(e,t){var i;if("\t"===e.indent)i="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;i=E.call(Array(e.indent+1)," ")}return{base:i,prev:E.call(Array(t+1),i)}}(r,a);if(void 0===n)n=[];else if(V(n,t)>=0)return"[Circular]";function z(t,i,o){if(i&&(n=_.call(n)).push(i),o){var s={depth:r.depth};return H(r,"quoteStyle")&&(s.quoteStyle=r.quoteStyle),e(t,s,a+1,n)}return e(t,r,a+1,n)}if("function"==typeof t&&!M(t)){var B=function(e){if(e.name)return e.name;var t=x.call(v.call(e),/^function\s*([\w$]+)/);if(t)return t[1];return null}(t),J=Z(t,z);return"[Function"+(B?": "+B:" (anonymous)")+"]"+(J.length>0?" { "+E.call(J,", ")+" }":"")}if(U(t)){var ee=C?b.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):T.call(t);return"object"!=typeof t||C?ee:X(ee)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(t)){for(var te="<"+w.call(String(t.nodeName)),ie=t.attributes||[],ae=0;ae<ie.length;ae++)te+=" "+ie[ae].name+"="+D($(ie[ae].value),"double",r);return te+=">",t.childNodes&&t.childNodes.length&&(te+="..."),te+="</"+w.call(String(t.nodeName))+">"}if(q(t)){if(0===t.length)return"[]";var ne=Z(t,z);return A&&!function(e){for(var t=0;t<e.length;t++)if(V(e[t],"\n")>=0)return!1;return!0}(ne)?"["+Y(ne,A)+"]":"[ "+E.call(ne,", ")+" ]"}if(function(e){return!("[object Error]"!==G(e)||N&&"object"==typeof e&&N in e)}(t)){var oe=Z(t,z);return"cause"in Error.prototype||!("cause"in t)||R.call(t,"cause")?0===oe.length?"["+String(t)+"]":"{ ["+String(t)+"] "+E.call(oe,", ")+" }":"{ ["+String(t)+"] "+E.call(j.call("[cause]: "+z(t.cause),oe),", ")+" }"}if("object"==typeof t&&c){if(L&&"function"==typeof t[L]&&F)return F(t,{depth:S-a});if("symbol"!==c&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!o||!e||"object"!=typeof e)return!1;try{o.call(e);try{p.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var se=[];return s.call(t,(function(e,i){se.push(z(i,t,!0)+" => "+z(e,t))})),K("Map",o.call(t),se,A)}if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e);try{o.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var re=[];return l.call(t,(function(e){re.push(z(e,t))})),K("Set",p.call(t),re,A)}if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e,u);try{d.call(e,d)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return Q("WeakMap");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{d.call(e,d);try{u.call(e,u)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return Q("WeakSet");if(function(e){if(!m||!e||"object"!=typeof e)return!1;try{return m.call(e),!0}catch(e){}return!1}(t))return Q("WeakRef");if(function(e){return!("[object Number]"!==G(e)||N&&"object"==typeof e&&N in e)}(t))return X(z(Number(t)));if(function(e){if(!e||"object"!=typeof e||!O)return!1;try{return O.call(e),!0}catch(e){}return!1}(t))return X(z(O.call(t)));if(function(e){return!("[object Boolean]"!==G(e)||N&&"object"==typeof e&&N in e)}(t))return X(f.call(t));if(function(e){return!("[object String]"!==G(e)||N&&"object"==typeof e&&N in e)}(t))return X(z(String(t)));if(!function(e){return!("[object Date]"!==G(e)||N&&"object"==typeof e&&N in e)}(t)&&!M(t)){var ce=Z(t,z),pe=P?P(t)===Object.prototype:t instanceof Object||t.constructor===Object,le=t instanceof Object?"":"null prototype",ue=!pe&&N&&Object(t)===t&&N in t?g.call(G(t),8,-1):le?"Object":"",de=(pe||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(ue||le?"["+E.call(j.call([],ue||[],le||[]),": ")+"] ":"");return 0===ce.length?de+"{}":A?de+"{"+Y(ce,A)+"}":de+"{ "+E.call(ce,", ")+" }"}return String(t)};var B=Object.prototype.hasOwnProperty||function(e){return e in this};function H(e,t){return B.call(e,t)}function G(e){return h.call(e)}function V(e,t){if(e.indexOf)return e.indexOf(t);for(var i=0,a=e.length;i<a;i++)if(e[i]===t)return i;return-1}function W(e,t){if(e.length>t.maxStringLength){var i=e.length-t.maxStringLength,a="... "+i+" more character"+(i>1?"s":"");return W(g.call(e,0,t.maxStringLength),t)+a}return D(b.call(b.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,J),"single",t)}function J(e){var t=e.charCodeAt(0),i={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return i?"\\"+i:"\\x"+(t<16?"0":"")+y.call(t.toString(16))}function X(e){return"Object("+e+")"}function Q(e){return e+" { ? }"}function K(e,t,i,a){return e+" ("+t+") {"+(a?Y(i,a):E.call(i,", "))+"}"}function Y(e,t){if(0===e.length)return"";var i="\n"+t.prev+t.base;return i+E.call(e,","+i)+"\n"+t.prev}function Z(e,t){var i=q(e),a=[];if(i){a.length=e.length;for(var n=0;n<e.length;n++)a[n]=H(e,n)?t(e[n],e):""}var o,s="function"==typeof A?A(e):[];if(C){o={};for(var r=0;r<s.length;r++)o["$"+s[r]]=s[r]}for(var c in e)H(e,c)&&(i&&String(Number(c))===c&&c<e.length||C&&o["$"+c]instanceof Symbol||(k.call(/[^\w$]/,c)?a.push(t(c,e)+": "+t(e[c],e)):a.push(c+": "+t(e[c],e))));if("function"==typeof A)for(var p=0;p<s.length;p++)R.call(e,s[p])&&a.push("["+t(s[p])+"]: "+t(e[s[p]],e));return a}},2794:(e,t,i)=>{e.exports=i(3837).inspect},778:(e,t,i)=>{var a=i(2479);function n(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function o(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},i=e.name||"Function wrapped with `once`";return t.onceError=i+" shouldn't be called more than once",t.called=!1,t}e.exports=a(n),e.exports.strict=a(o),n.proto=n((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return n(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return o(this)},configurable:!0})}))},5798:e=>{"use strict";var t=String.prototype.replace,i=/%20/g,a="RFC1738",n="RFC3986";e.exports={default:n,formatters:{RFC1738:function(e){return t.call(e,i,"+")},RFC3986:function(e){return String(e)}},RFC1738:a,RFC3986:n}},129:(e,t,i)=>{"use strict";var a=i(8261),n=i(5235),o=i(5798);e.exports={formats:o,parse:n,stringify:a}},5235:(e,t,i)=>{"use strict";var a=i(2769),n=Object.prototype.hasOwnProperty,o=Array.isArray,s={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:a.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},r=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},p=function(e,t,i,a){if(e){var o=i.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,r=i.depth>0&&/(\[[^[\]]*])/.exec(o),p=r?o.slice(0,r.index):o,l=[];if(p){if(!i.plainObjects&&n.call(Object.prototype,p)&&!i.allowPrototypes)return;l.push(p)}for(var u=0;i.depth>0&&null!==(r=s.exec(o))&&u<i.depth;){if(u+=1,!i.plainObjects&&n.call(Object.prototype,r[1].slice(1,-1))&&!i.allowPrototypes)return;l.push(r[1])}return r&&l.push("["+o.slice(r.index)+"]"),function(e,t,i,a){for(var n=a?t:c(t,i),o=e.length-1;o>=0;--o){var s,r=e[o];if("[]"===r&&i.parseArrays)s=[].concat(n);else{s=i.plainObjects?Object.create(null):{};var p="["===r.charAt(0)&&"]"===r.charAt(r.length-1)?r.slice(1,-1):r,l=parseInt(p,10);i.parseArrays||""!==p?!isNaN(l)&&r!==p&&String(l)===p&&l>=0&&i.parseArrays&&l<=i.arrayLimit?(s=[])[l]=n:"__proto__"!==p&&(s[p]=n):s={0:n}}n=s}return n}(l,t,i,a)}};e.exports=function(e,t){var i=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:s.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||a.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return i.plainObjects?Object.create(null):{};for(var l="string"==typeof e?function(e,t){var i,p={},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=t.parameterLimit===1/0?void 0:t.parameterLimit,d=l.split(t.delimiter,u),m=-1,f=t.charset;if(t.charsetSentinel)for(i=0;i<d.length;++i)0===d[i].indexOf("utf8=")&&("utf8=%E2%9C%93"===d[i]?f="utf-8":"utf8=%26%2310003%3B"===d[i]&&(f="iso-8859-1"),m=i,i=d.length);for(i=0;i<d.length;++i)if(i!==m){var h,v,x=d[i],g=x.indexOf("]="),b=-1===g?x.indexOf("="):g+1;-1===b?(h=t.decoder(x,s.decoder,f,"key"),v=t.strictNullHandling?null:""):(h=t.decoder(x.slice(0,b),s.decoder,f,"key"),v=a.maybeMap(c(x.slice(b+1),t),(function(e){return t.decoder(e,s.decoder,f,"value")}))),v&&t.interpretNumericEntities&&"iso-8859-1"===f&&(v=r(v)),x.indexOf("[]=")>-1&&(v=o(v)?[v]:v),n.call(p,h)?p[h]=a.combine(p[h],v):p[h]=v}return p}(e,i):e,u=i.plainObjects?Object.create(null):{},d=Object.keys(l),m=0;m<d.length;++m){var f=d[m],h=p(f,l[f],i,"string"==typeof e);u=a.merge(u,h,i)}return!0===i.allowSparse?u:a.compact(u)}},8261:(e,t,i)=>{"use strict";var a=i(7478),n=i(2769),o=i(5798),s=Object.prototype.hasOwnProperty,r={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},c=Array.isArray,p=String.prototype.split,l=Array.prototype.push,u=function(e,t){l.apply(e,c(t)?t:[t])},d=Date.prototype.toISOString,m=o.default,f={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,format:m,formatter:o.formatters[m],indices:!1,serializeDate:function(e){return d.call(e)},skipNulls:!1,strictNullHandling:!1},h={},v=function e(t,i,o,s,r,l,d,m,v,x,g,b,y,w,k){for(var j,E=t,_=k,S=0,O=!1;void 0!==(_=_.get(h))&&!O;){var A=_.get(t);if(S+=1,void 0!==A){if(A===S)throw new RangeError("Cyclic object value");O=!0}void 0===_.get(h)&&(S=0)}if("function"==typeof d?E=d(i,E):E instanceof Date?E=x(E):"comma"===o&&c(E)&&(E=n.maybeMap(E,(function(e){return e instanceof Date?x(e):e}))),null===E){if(s)return l&&!y?l(i,f.encoder,w,"key",g):i;E=""}if("string"==typeof(j=E)||"number"==typeof j||"boolean"==typeof j||"symbol"==typeof j||"bigint"==typeof j||n.isBuffer(E)){if(l){var T=y?i:l(i,f.encoder,w,"key",g);if("comma"===o&&y){for(var C=p.call(String(E),","),N="",R=0;R<C.length;++R)N+=(0===R?"":",")+b(l(C[R],f.encoder,w,"value",g));return[b(T)+(c(E)&&1===C.length?"[]":"")+"="+N]}return[b(T)+"="+b(l(E,f.encoder,w,"value",g))]}return[b(i)+"="+b(String(E))]}var P,I=[];if(void 0===E)return I;if("comma"===o&&c(E))P=[{value:E.length>0?E.join(",")||null:void 0}];else if(c(d))P=d;else{var F=Object.keys(E);P=m?F.sort(m):F}for(var z="comma"===o&&c(E)&&1===E.length?i+"[]":i,L=0;L<P.length;++L){var D=P[L],$="object"==typeof D&&void 0!==D.value?D.value:E[D];if(!r||null!==$){var q=c(E)?"function"==typeof o?o(z,D):z:z+(v?"."+D:"["+D+"]");k.set(t,S);var M=a();M.set(h,k),u(I,e($,q,o,s,r,l,d,m,v,x,g,b,y,w,M))}}return I};e.exports=function(e,t){var i,n=e,p=function(e){if(!e)return f;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||f.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var i=o.default;if(void 0!==e.format){if(!s.call(o.formatters,e.format))throw new TypeError("Unknown format option provided.");i=e.format}var a=o.formatters[i],n=f.filter;return("function"==typeof e.filter||c(e.filter))&&(n=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:f.addQueryPrefix,allowDots:void 0===e.allowDots?f.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:f.charsetSentinel,delimiter:void 0===e.delimiter?f.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:f.encode,encoder:"function"==typeof e.encoder?e.encoder:f.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:f.encodeValuesOnly,filter:n,format:i,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:f.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:f.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:f.strictNullHandling}}(t);"function"==typeof p.filter?n=(0,p.filter)("",n):c(p.filter)&&(i=p.filter);var l,d=[];if("object"!=typeof n||null===n)return"";l=t&&t.arrayFormat in r?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var m=r[l];i||(i=Object.keys(n)),p.sort&&i.sort(p.sort);for(var h=a(),x=0;x<i.length;++x){var g=i[x];p.skipNulls&&null===n[g]||u(d,v(n[g],g,m,p.strictNullHandling,p.skipNulls,p.encode?p.encoder:null,p.filter,p.sort,p.allowDots,p.serializeDate,p.format,p.formatter,p.encodeValuesOnly,p.charset,h))}var b=d.join(p.delimiter),y=!0===p.addQueryPrefix?"?":"";return p.charsetSentinel&&("iso-8859-1"===p.charset?y+="utf8=%26%2310003%3B&":y+="utf8=%E2%9C%93&"),b.length>0?y+b:""}},2769:(e,t,i)=>{"use strict";var a=i(5798),n=Object.prototype.hasOwnProperty,o=Array.isArray,s=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),r=function(e,t){for(var i=t&&t.plainObjects?Object.create(null):{},a=0;a<e.length;++a)void 0!==e[a]&&(i[a]=e[a]);return i};e.exports={arrayToObject:r,assign:function(e,t){return Object.keys(t).reduce((function(e,i){return e[i]=t[i],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],i=[],a=0;a<t.length;++a)for(var n=t[a],s=n.obj[n.prop],r=Object.keys(s),c=0;c<r.length;++c){var p=r[c],l=s[p];"object"==typeof l&&null!==l&&-1===i.indexOf(l)&&(t.push({obj:s,prop:p}),i.push(l))}return function(e){for(;e.length>1;){var t=e.pop(),i=t.obj[t.prop];if(o(i)){for(var a=[],n=0;n<i.length;++n)void 0!==i[n]&&a.push(i[n]);t.obj[t.prop]=a}}}(t),e},decode:function(e,t,i){var a=e.replace(/\+/g," ");if("iso-8859-1"===i)return a.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(a)}catch(e){return a}},encode:function(e,t,i,n,o){if(0===e.length)return e;var r=e;if("symbol"==typeof e?r=Symbol.prototype.toString.call(e):"string"!=typeof e&&(r=String(e)),"iso-8859-1"===i)return escape(r).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var c="",p=0;p<r.length;++p){var l=r.charCodeAt(p);45===l||46===l||95===l||126===l||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122||o===a.RFC1738&&(40===l||41===l)?c+=r.charAt(p):l<128?c+=s[l]:l<2048?c+=s[192|l>>6]+s[128|63&l]:l<55296||l>=57344?c+=s[224|l>>12]+s[128|l>>6&63]+s[128|63&l]:(p+=1,l=65536+((1023&l)<<10|1023&r.charCodeAt(p)),c+=s[240|l>>18]+s[128|l>>12&63]+s[128|l>>6&63]+s[128|63&l])}return c},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(o(e)){for(var i=[],a=0;a<e.length;a+=1)i.push(t(e[a]));return i}return t(e)},merge:function e(t,i,a){if(!i)return t;if("object"!=typeof i){if(o(t))t.push(i);else{if(!t||"object"!=typeof t)return[t,i];(a&&(a.plainObjects||a.allowPrototypes)||!n.call(Object.prototype,i))&&(t[i]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(i);var s=t;return o(t)&&!o(i)&&(s=r(t,a)),o(t)&&o(i)?(i.forEach((function(i,o){if(n.call(t,o)){var s=t[o];s&&"object"==typeof s&&i&&"object"==typeof i?t[o]=e(s,i,a):t.push(i)}else t[o]=i})),t):Object.keys(i).reduce((function(t,o){var s=i[o];return n.call(t,o)?t[o]=e(t[o],s,a):t[o]=s,t}),s)}}},2257:(e,t,i)=>{const a=Symbol("SemVer ANY");class Comparator{static get ANY(){return a}constructor(e,t){if(t=n(t),e instanceof Comparator){if(e.loose===!!t.loose)return e;e=e.value}c("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===a?this.value="":this.value=this.operator+this.semver.version,c("comp",this)}parse(e){const t=this.options.loose?o[s.COMPARATORLOOSE]:o[s.COMPARATOR],i=e.match(t);if(!i)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==i[1]?i[1]:"","="===this.operator&&(this.operator=""),i[2]?this.semver=new p(i[2],this.options.loose):this.semver=a}toString(){return this.value}test(e){if(c("Comparator.test",e,this.options.loose),this.semver===a||e===a)return!0;if("string"==typeof e)try{e=new p(e,this.options)}catch(e){return!1}return r(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof Comparator))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new l(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new l(this.value,t).test(e.semver);const i=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),a=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),n=this.semver.version===e.semver.version,o=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),s=r(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),c=r(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return i||a||n&&o||s||c}}e.exports=Comparator;const n=i(2893),{re:o,t:s}=i(5765),r=i(7539),c=i(4225),p=i(6376),l=i(6902)},6902:(e,t,i)=>{class Range{constructor(e,t){if(t=n(t),e instanceof Range)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new Range(e.raw,t);if(e instanceof o)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split("||").map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!m(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&f(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const t=`parseRange:${Object.keys(this.options).join(",")}:${e}`,i=a.get(t);if(i)return i;const n=this.options.loose,r=n?c[p.HYPHENRANGELOOSE]:c[p.HYPHENRANGE];e=e.replace(r,S(this.options.includePrerelease)),s("hyphen replace",e),e=e.replace(c[p.COMPARATORTRIM],l),s("comparator trim",e);let f=(e=(e=(e=e.replace(c[p.TILDETRIM],u)).replace(c[p.CARETTRIM],d)).split(/\s+/).join(" ")).split(" ").map((e=>v(e,this.options))).join(" ").split(/\s+/).map((e=>_(e,this.options)));n&&(f=f.filter((e=>(s("loose invalid filter",e,this.options),!!e.match(c[p.COMPARATORLOOSE]))))),s("range list",f);const h=new Map,x=f.map((e=>new o(e,this.options)));for(const e of x){if(m(e))return[e];h.set(e.value,e)}h.size>1&&h.has("")&&h.delete("");const g=[...h.values()];return a.set(t,g),g}intersects(e,t){if(!(e instanceof Range))throw new TypeError("a Range is required");return this.set.some((i=>h(i,t)&&e.set.some((e=>h(e,t)&&i.every((i=>e.every((e=>i.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new r(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(O(this.set[t],e,this.options))return!0;return!1}}e.exports=Range;const a=new(i(9593))({max:1e3}),n=i(2893),o=i(2257),s=i(4225),r=i(6376),{re:c,t:p,comparatorTrimReplace:l,tildeTrimReplace:u,caretTrimReplace:d}=i(5765),m=e=>"<0.0.0-0"===e.value,f=e=>""===e.value,h=(e,t)=>{let i=!0;const a=e.slice();let n=a.pop();for(;i&&a.length;)i=a.every((e=>n.intersects(e,t))),n=a.pop();return i},v=(e,t)=>(s("comp",e,t),e=y(e,t),s("caret",e),e=g(e,t),s("tildes",e),e=k(e,t),s("xrange",e),e=E(e,t),s("stars",e),e),x=e=>!e||"x"===e.toLowerCase()||"*"===e,g=(e,t)=>e.trim().split(/\s+/).map((e=>b(e,t))).join(" "),b=(e,t)=>{const i=t.loose?c[p.TILDELOOSE]:c[p.TILDE];return e.replace(i,((t,i,a,n,o)=>{let r;return s("tilde",e,t,i,a,n,o),x(i)?r="":x(a)?r=`>=${i}.0.0 <${+i+1}.0.0-0`:x(n)?r=`>=${i}.${a}.0 <${i}.${+a+1}.0-0`:o?(s("replaceTilde pr",o),r=`>=${i}.${a}.${n}-${o} <${i}.${+a+1}.0-0`):r=`>=${i}.${a}.${n} <${i}.${+a+1}.0-0`,s("tilde return",r),r}))},y=(e,t)=>e.trim().split(/\s+/).map((e=>w(e,t))).join(" "),w=(e,t)=>{s("caret",e,t);const i=t.loose?c[p.CARETLOOSE]:c[p.CARET],a=t.includePrerelease?"-0":"";return e.replace(i,((t,i,n,o,r)=>{let c;return s("caret",e,t,i,n,o,r),x(i)?c="":x(n)?c=`>=${i}.0.0${a} <${+i+1}.0.0-0`:x(o)?c="0"===i?`>=${i}.${n}.0${a} <${i}.${+n+1}.0-0`:`>=${i}.${n}.0${a} <${+i+1}.0.0-0`:r?(s("replaceCaret pr",r),c="0"===i?"0"===n?`>=${i}.${n}.${o}-${r} <${i}.${n}.${+o+1}-0`:`>=${i}.${n}.${o}-${r} <${i}.${+n+1}.0-0`:`>=${i}.${n}.${o}-${r} <${+i+1}.0.0-0`):(s("no pr"),c="0"===i?"0"===n?`>=${i}.${n}.${o}${a} <${i}.${n}.${+o+1}-0`:`>=${i}.${n}.${o}${a} <${i}.${+n+1}.0-0`:`>=${i}.${n}.${o} <${+i+1}.0.0-0`),s("caret return",c),c}))},k=(e,t)=>(s("replaceXRanges",e,t),e.split(/\s+/).map((e=>j(e,t))).join(" ")),j=(e,t)=>{e=e.trim();const i=t.loose?c[p.XRANGELOOSE]:c[p.XRANGE];return e.replace(i,((i,a,n,o,r,c)=>{s("xRange",e,i,a,n,o,r,c);const p=x(n),l=p||x(o),u=l||x(r),d=u;return"="===a&&d&&(a=""),c=t.includePrerelease?"-0":"",p?i=">"===a||"<"===a?"<0.0.0-0":"*":a&&d?(l&&(o=0),r=0,">"===a?(a=">=",l?(n=+n+1,o=0,r=0):(o=+o+1,r=0)):"<="===a&&(a="<",l?n=+n+1:o=+o+1),"<"===a&&(c="-0"),i=`${a+n}.${o}.${r}${c}`):l?i=`>=${n}.0.0${c} <${+n+1}.0.0-0`:u&&(i=`>=${n}.${o}.0${c} <${n}.${+o+1}.0-0`),s("xRange return",i),i}))},E=(e,t)=>(s("replaceStars",e,t),e.trim().replace(c[p.STAR],"")),_=(e,t)=>(s("replaceGTE0",e,t),e.trim().replace(c[t.includePrerelease?p.GTE0PRE:p.GTE0],"")),S=e=>(t,i,a,n,o,s,r,c,p,l,u,d,m)=>`${i=x(a)?"":x(n)?`>=${a}.0.0${e?"-0":""}`:x(o)?`>=${a}.${n}.0${e?"-0":""}`:s?`>=${i}`:`>=${i}${e?"-0":""}`} ${c=x(p)?"":x(l)?`<${+p+1}.0.0-0`:x(u)?`<${p}.${+l+1}.0-0`:d?`<=${p}.${l}.${u}-${d}`:e?`<${p}.${l}.${+u+1}-0`:`<=${c}`}`.trim(),O=(e,t,i)=>{for(let i=0;i<e.length;i++)if(!e[i].test(t))return!1;if(t.prerelease.length&&!i.includePrerelease){for(let i=0;i<e.length;i++)if(s(e[i].semver),e[i].semver!==o.ANY&&e[i].semver.prerelease.length>0){const a=e[i].semver;if(a.major===t.major&&a.minor===t.minor&&a.patch===t.patch)return!0}return!1}return!0}},6376:(e,t,i)=>{const a=i(4225),{MAX_LENGTH:n,MAX_SAFE_INTEGER:o}=i(3295),{re:s,t:r}=i(5765),c=i(2893),{compareIdentifiers:p}=i(6742);class SemVer{constructor(e,t){if(t=c(t),e instanceof SemVer){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>n)throw new TypeError(`version is longer than ${n} characters`);a("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const i=e.trim().match(t.loose?s[r.LOOSE]:s[r.FULL]);if(!i)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+i[1],this.minor=+i[2],this.patch=+i[3],this.major>o||this.major<0)throw new TypeError("Invalid major version");if(this.minor>o||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>o||this.patch<0)throw new TypeError("Invalid patch version");i[4]?this.prerelease=i[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<o)return t}return e})):this.prerelease=[],this.build=i[5]?i[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(a("SemVer.compare",this.version,this.options,e),!(e instanceof SemVer)){if("string"==typeof e&&e===this.version)return 0;e=new SemVer(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof SemVer||(e=new SemVer(e,this.options)),p(this.major,e.major)||p(this.minor,e.minor)||p(this.patch,e.patch)}comparePre(e){if(e instanceof SemVer||(e=new SemVer(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const i=this.prerelease[t],n=e.prerelease[t];if(a("prerelease compare",t,i,n),void 0===i&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===i)return-1;if(i!==n)return p(i,n)}while(++t)}compareBuild(e){e instanceof SemVer||(e=new SemVer(e,this.options));let t=0;do{const i=this.build[t],n=e.build[t];if(a("prerelease compare",t,i,n),void 0===i&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===i)return-1;if(i!==n)return p(i,n)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(0===p(this.prerelease[0],t)?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}e.exports=SemVer},3507:(e,t,i)=>{const a=i(3959);e.exports=(e,t)=>{const i=a(e.trim().replace(/^[=v]+/,""),t);return i?i.version:null}},7539:(e,t,i)=>{const a=i(8718),n=i(1194),o=i(1312),s=i(5903),r=i(1544),c=i(2056);e.exports=(e,t,i,p)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof i&&(i=i.version),e===i;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof i&&(i=i.version),e!==i;case"":case"=":case"==":return a(e,i,p);case"!=":return n(e,i,p);case">":return o(e,i,p);case">=":return s(e,i,p);case"<":return r(e,i,p);case"<=":return c(e,i,p);default:throw new TypeError(`Invalid operator: ${t}`)}}},9038:(e,t,i)=>{const a=i(6376),n=i(3959),{re:o,t:s}=i(5765);e.exports=(e,t)=>{if(e instanceof a)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let i=null;if((t=t||{}).rtl){let t;for(;(t=o[s.COERCERTL].exec(e))&&(!i||i.index+i[0].length!==e.length);)i&&t.index+t[0].length===i.index+i[0].length||(i=t),o[s.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;o[s.COERCERTL].lastIndex=-1}else i=e.match(o[s.COERCE]);return null===i?null:n(`${i[2]}.${i[3]||"0"}.${i[4]||"0"}`,t)}},8880:(e,t,i)=>{const a=i(6376);e.exports=(e,t,i)=>{const n=new a(e,i),o=new a(t,i);return n.compare(o)||n.compareBuild(o)}},7880:(e,t,i)=>{const a=i(6269);e.exports=(e,t)=>a(e,t,!0)},6269:(e,t,i)=>{const a=i(6376);e.exports=(e,t,i)=>new a(e,i).compare(new a(t,i))},2378:(e,t,i)=>{const a=i(3959),n=i(8718);e.exports=(e,t)=>{if(n(e,t))return null;{const i=a(e),n=a(t),o=i.prerelease.length||n.prerelease.length,s=o?"pre":"",r=o?"prerelease":"";for(const e in i)if(("major"===e||"minor"===e||"patch"===e)&&i[e]!==n[e])return s+e;return r}}},8718:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>0===a(e,t,i)},1312:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>a(e,t,i)>0},5903:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>a(e,t,i)>=0},253:(e,t,i)=>{const a=i(6376);e.exports=(e,t,i,n)=>{"string"==typeof i&&(n=i,i=void 0);try{return new a(e instanceof a?e.version:e,i).inc(t,n).version}catch(e){return null}}},1544:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>a(e,t,i)<0},2056:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>a(e,t,i)<=0},8679:(e,t,i)=>{const a=i(6376);e.exports=(e,t)=>new a(e,t).major},7789:(e,t,i)=>{const a=i(6376);e.exports=(e,t)=>new a(e,t).minor},1194:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>0!==a(e,t,i)},3959:(e,t,i)=>{const{MAX_LENGTH:a}=i(3295),{re:n,t:o}=i(5765),s=i(6376),r=i(2893);e.exports=(e,t)=>{if(t=r(t),e instanceof s)return e;if("string"!=typeof e)return null;if(e.length>a)return null;if(!(t.loose?n[o.LOOSE]:n[o.FULL]).test(e))return null;try{return new s(e,t)}catch(e){return null}}},2358:(e,t,i)=>{const a=i(6376);e.exports=(e,t)=>new a(e,t).patch},7559:(e,t,i)=>{const a=i(3959);e.exports=(e,t)=>{const i=a(e,t);return i&&i.prerelease.length?i.prerelease:null}},9795:(e,t,i)=>{const a=i(6269);e.exports=(e,t,i)=>a(t,e,i)},3657:(e,t,i)=>{const a=i(8880);e.exports=(e,t)=>e.sort(((e,i)=>a(i,e,t)))},5712:(e,t,i)=>{const a=i(6902);e.exports=(e,t,i)=>{try{t=new a(t,i)}catch(e){return!1}return t.test(e)}},1100:(e,t,i)=>{const a=i(8880);e.exports=(e,t)=>e.sort(((e,i)=>a(e,i,t)))},6397:(e,t,i)=>{const a=i(3959);e.exports=(e,t)=>{const i=a(e,t);return i?i.version:null}},1249:(e,t,i)=>{const a=i(5765);e.exports={re:a.re,src:a.src,tokens:a.t,SEMVER_SPEC_VERSION:i(3295).SEMVER_SPEC_VERSION,SemVer:i(6376),compareIdentifiers:i(6742).compareIdentifiers,rcompareIdentifiers:i(6742).rcompareIdentifiers,parse:i(3959),valid:i(6397),clean:i(3507),inc:i(253),diff:i(2378),major:i(8679),minor:i(7789),patch:i(2358),prerelease:i(7559),compare:i(6269),rcompare:i(9795),compareLoose:i(7880),compareBuild:i(8880),sort:i(1100),rsort:i(3657),gt:i(1312),lt:i(1544),eq:i(8718),neq:i(1194),gte:i(5903),lte:i(2056),cmp:i(7539),coerce:i(9038),Comparator:i(2257),Range:i(6902),satisfies:i(5712),toComparators:i(1042),maxSatisfying:i(5775),minSatisfying:i(1657),minVersion:i(5316),validRange:i(9042),outside:i(6826),gtr:i(7606),ltr:i(32),intersects:i(2937),simplifyRange:i(7908),subset:i(799)}},3295:e=>{const t=Number.MAX_SAFE_INTEGER||9007199254740991;e.exports={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:t,MAX_SAFE_COMPONENT_LENGTH:16}},4225:e=>{const t="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};e.exports=t},6742:e=>{const t=/^[0-9]+$/,i=(e,i)=>{const a=t.test(e),n=t.test(i);return a&&n&&(e=+e,i=+i),e===i?0:a&&!n?-1:n&&!a?1:e<i?-1:1};e.exports={compareIdentifiers:i,rcompareIdentifiers:(e,t)=>i(t,e)}},2893:e=>{const t=["includePrerelease","loose","rtl"];e.exports=e=>e?"object"!=typeof e?{loose:!0}:t.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{}},5765:(e,t,i)=>{const{MAX_SAFE_COMPONENT_LENGTH:a}=i(3295),n=i(4225),o=(t=e.exports={}).re=[],s=t.src=[],r=t.t={};let c=0;const p=(e,t,i)=>{const a=c++;n(e,a,t),r[e]=a,s[a]=t,o[a]=new RegExp(t,i?"g":void 0)};p("NUMERICIDENTIFIER","0|[1-9]\\d*"),p("NUMERICIDENTIFIERLOOSE","[0-9]+"),p("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),p("MAINVERSION",`(${s[r.NUMERICIDENTIFIER]})\\.(${s[r.NUMERICIDENTIFIER]})\\.(${s[r.NUMERICIDENTIFIER]})`),p("MAINVERSIONLOOSE",`(${s[r.NUMERICIDENTIFIERLOOSE]})\\.(${s[r.NUMERICIDENTIFIERLOOSE]})\\.(${s[r.NUMERICIDENTIFIERLOOSE]})`),p("PRERELEASEIDENTIFIER",`(?:${s[r.NUMERICIDENTIFIER]}|${s[r.NONNUMERICIDENTIFIER]})`),p("PRERELEASEIDENTIFIERLOOSE",`(?:${s[r.NUMERICIDENTIFIERLOOSE]}|${s[r.NONNUMERICIDENTIFIER]})`),p("PRERELEASE",`(?:-(${s[r.PRERELEASEIDENTIFIER]}(?:\\.${s[r.PRERELEASEIDENTIFIER]})*))`),p("PRERELEASELOOSE",`(?:-?(${s[r.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s[r.PRERELEASEIDENTIFIERLOOSE]})*))`),p("BUILDIDENTIFIER","[0-9A-Za-z-]+"),p("BUILD",`(?:\\+(${s[r.BUILDIDENTIFIER]}(?:\\.${s[r.BUILDIDENTIFIER]})*))`),p("FULLPLAIN",`v?${s[r.MAINVERSION]}${s[r.PRERELEASE]}?${s[r.BUILD]}?`),p("FULL",`^${s[r.FULLPLAIN]}$`),p("LOOSEPLAIN",`[v=\\s]*${s[r.MAINVERSIONLOOSE]}${s[r.PRERELEASELOOSE]}?${s[r.BUILD]}?`),p("LOOSE",`^${s[r.LOOSEPLAIN]}$`),p("GTLT","((?:<|>)?=?)"),p("XRANGEIDENTIFIERLOOSE",`${s[r.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),p("XRANGEIDENTIFIER",`${s[r.NUMERICIDENTIFIER]}|x|X|\\*`),p("XRANGEPLAIN",`[v=\\s]*(${s[r.XRANGEIDENTIFIER]})(?:\\.(${s[r.XRANGEIDENTIFIER]})(?:\\.(${s[r.XRANGEIDENTIFIER]})(?:${s[r.PRERELEASE]})?${s[r.BUILD]}?)?)?`),p("XRANGEPLAINLOOSE",`[v=\\s]*(${s[r.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[r.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[r.XRANGEIDENTIFIERLOOSE]})(?:${s[r.PRERELEASELOOSE]})?${s[r.BUILD]}?)?)?`),p("XRANGE",`^${s[r.GTLT]}\\s*${s[r.XRANGEPLAIN]}$`),p("XRANGELOOSE",`^${s[r.GTLT]}\\s*${s[r.XRANGEPLAINLOOSE]}$`),p("COERCE",`(^|[^\\d])(\\d{1,${a}})(?:\\.(\\d{1,${a}}))?(?:\\.(\\d{1,${a}}))?(?:$|[^\\d])`),p("COERCERTL",s[r.COERCE],!0),p("LONETILDE","(?:~>?)"),p("TILDETRIM",`(\\s*)${s[r.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",p("TILDE",`^${s[r.LONETILDE]}${s[r.XRANGEPLAIN]}$`),p("TILDELOOSE",`^${s[r.LONETILDE]}${s[r.XRANGEPLAINLOOSE]}$`),p("LONECARET","(?:\\^)"),p("CARETTRIM",`(\\s*)${s[r.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",p("CARET",`^${s[r.LONECARET]}${s[r.XRANGEPLAIN]}$`),p("CARETLOOSE",`^${s[r.LONECARET]}${s[r.XRANGEPLAINLOOSE]}$`),p("COMPARATORLOOSE",`^${s[r.GTLT]}\\s*(${s[r.LOOSEPLAIN]})$|^$`),p("COMPARATOR",`^${s[r.GTLT]}\\s*(${s[r.FULLPLAIN]})$|^$`),p("COMPARATORTRIM",`(\\s*)${s[r.GTLT]}\\s*(${s[r.LOOSEPLAIN]}|${s[r.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",p("HYPHENRANGE",`^\\s*(${s[r.XRANGEPLAIN]})\\s+-\\s+(${s[r.XRANGEPLAIN]})\\s*$`),p("HYPHENRANGELOOSE",`^\\s*(${s[r.XRANGEPLAINLOOSE]})\\s+-\\s+(${s[r.XRANGEPLAINLOOSE]})\\s*$`),p("STAR","(<|>)?=?\\s*\\*"),p("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),p("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")},7606:(e,t,i)=>{const a=i(6826);e.exports=(e,t,i)=>a(e,t,">",i)},2937:(e,t,i)=>{const a=i(6902);e.exports=(e,t,i)=>(e=new a(e,i),t=new a(t,i),e.intersects(t))},32:(e,t,i)=>{const a=i(6826);e.exports=(e,t,i)=>a(e,t,"<",i)},5775:(e,t,i)=>{const a=i(6376),n=i(6902);e.exports=(e,t,i)=>{let o=null,s=null,r=null;try{r=new n(t,i)}catch(e){return null}return e.forEach((e=>{r.test(e)&&(o&&-1!==s.compare(e)||(o=e,s=new a(o,i)))})),o}},1657:(e,t,i)=>{const a=i(6376),n=i(6902);e.exports=(e,t,i)=>{let o=null,s=null,r=null;try{r=new n(t,i)}catch(e){return null}return e.forEach((e=>{r.test(e)&&(o&&1!==s.compare(e)||(o=e,s=new a(o,i)))})),o}},5316:(e,t,i)=>{const a=i(6376),n=i(6902),o=i(1312);e.exports=(e,t)=>{e=new n(e,t);let i=new a("0.0.0");if(e.test(i))return i;if(i=new a("0.0.0-0"),e.test(i))return i;i=null;for(let t=0;t<e.set.length;++t){const n=e.set[t];let s=null;n.forEach((e=>{const t=new a(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":s&&!o(t,s)||(s=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!s||i&&!o(i,s)||(i=s)}return i&&e.test(i)?i:null}},6826:(e,t,i)=>{const a=i(6376),n=i(2257),{ANY:o}=n,s=i(6902),r=i(5712),c=i(1312),p=i(1544),l=i(2056),u=i(5903);e.exports=(e,t,i,d)=>{let m,f,h,v,x;switch(e=new a(e,d),t=new s(t,d),i){case">":m=c,f=l,h=p,v=">",x=">=";break;case"<":m=p,f=u,h=c,v="<",x="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(r(e,t,d))return!1;for(let i=0;i<t.set.length;++i){const a=t.set[i];let s=null,r=null;if(a.forEach((e=>{e.semver===o&&(e=new n(">=0.0.0")),s=s||e,r=r||e,m(e.semver,s.semver,d)?s=e:h(e.semver,r.semver,d)&&(r=e)})),s.operator===v||s.operator===x)return!1;if((!r.operator||r.operator===v)&&f(e,r.semver))return!1;if(r.operator===x&&h(e,r.semver))return!1}return!0}},7908:(e,t,i)=>{const a=i(5712),n=i(6269);e.exports=(e,t,i)=>{const o=[];let s=null,r=null;const c=e.sort(((e,t)=>n(e,t,i)));for(const e of c){a(e,t,i)?(r=e,s||(s=e)):(r&&o.push([s,r]),r=null,s=null)}s&&o.push([s,null]);const p=[];for(const[e,t]of o)e===t?p.push(e):t||e!==c[0]?t?e===c[0]?p.push(`<=${t}`):p.push(`${e} - ${t}`):p.push(`>=${e}`):p.push("*");const l=p.join(" || "),u="string"==typeof t.raw?t.raw:String(t);return l.length<u.length?l:t}},799:(e,t,i)=>{const a=i(6902),n=i(2257),{ANY:o}=n,s=i(5712),r=i(6269),c=(e,t,i)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===o){if(1===t.length&&t[0].semver===o)return!0;e=i.includePrerelease?[new n(">=0.0.0-0")]:[new n(">=0.0.0")]}if(1===t.length&&t[0].semver===o){if(i.includePrerelease)return!0;t=[new n(">=0.0.0")]}const a=new Set;let c,u,d,m,f,h,v;for(const t of e)">"===t.operator||">="===t.operator?c=p(c,t,i):"<"===t.operator||"<="===t.operator?u=l(u,t,i):a.add(t.semver);if(a.size>1)return null;if(c&&u){if(d=r(c.semver,u.semver,i),d>0)return null;if(0===d&&(">="!==c.operator||"<="!==u.operator))return null}for(const e of a){if(c&&!s(e,String(c),i))return null;if(u&&!s(e,String(u),i))return null;for(const a of t)if(!s(e,String(a),i))return!1;return!0}let x=!(!u||i.includePrerelease||!u.semver.prerelease.length)&&u.semver,g=!(!c||i.includePrerelease||!c.semver.prerelease.length)&&c.semver;x&&1===x.prerelease.length&&"<"===u.operator&&0===x.prerelease[0]&&(x=!1);for(const e of t){if(v=v||">"===e.operator||">="===e.operator,h=h||"<"===e.operator||"<="===e.operator,c)if(g&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===g.major&&e.semver.minor===g.minor&&e.semver.patch===g.patch&&(g=!1),">"===e.operator||">="===e.operator){if(m=p(c,e,i),m===e&&m!==c)return!1}else if(">="===c.operator&&!s(c.semver,String(e),i))return!1;if(u)if(x&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===x.major&&e.semver.minor===x.minor&&e.semver.patch===x.patch&&(x=!1),"<"===e.operator||"<="===e.operator){if(f=l(u,e,i),f===e&&f!==u)return!1}else if("<="===u.operator&&!s(u.semver,String(e),i))return!1;if(!e.operator&&(u||c)&&0!==d)return!1}return!(c&&h&&!u&&0!==d)&&(!(u&&v&&!c&&0!==d)&&(!g&&!x))},p=(e,t,i)=>{if(!e)return t;const a=r(e.semver,t.semver,i);return a>0?e:a<0||">"===t.operator&&">="===e.operator?t:e},l=(e,t,i)=>{if(!e)return t;const a=r(e.semver,t.semver,i);return a<0?e:a>0||"<"===t.operator&&"<="===e.operator?t:e};e.exports=(e,t,i={})=>{if(e===t)return!0;e=new a(e,i),t=new a(t,i);let n=!1;e:for(const a of e.set){for(const e of t.set){const t=c(a,e,i);if(n=n||null!==t,t)continue e}if(n)return!1}return!0}},1042:(e,t,i)=>{const a=i(6902);e.exports=(e,t)=>new a(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" ")))},9042:(e,t,i)=>{const a=i(6902);e.exports=(e,t)=>{try{return new a(e,t).range||"*"}catch(e){return null}}},7478:(e,t,i)=>{"use strict";var a=i(210),n=i(1924),o=i(631),s=a("%TypeError%"),r=a("%WeakMap%",!0),c=a("%Map%",!0),p=n("WeakMap.prototype.get",!0),l=n("WeakMap.prototype.set",!0),u=n("WeakMap.prototype.has",!0),d=n("Map.prototype.get",!0),m=n("Map.prototype.set",!0),f=n("Map.prototype.has",!0),h=function(e,t){for(var i,a=e;null!==(i=a.next);a=i)if(i.key===t)return a.next=i.next,i.next=e.next,e.next=i,i};e.exports=function(){var e,t,i,a={assert:function(e){if(!a.has(e))throw new s("Side channel does not contain "+o(e))},get:function(a){if(r&&a&&("object"==typeof a||"function"==typeof a)){if(e)return p(e,a)}else if(c){if(t)return d(t,a)}else if(i)return function(e,t){var i=h(e,t);return i&&i.value}(i,a)},has:function(a){if(r&&a&&("object"==typeof a||"function"==typeof a)){if(e)return u(e,a)}else if(c){if(t)return f(t,a)}else if(i)return function(e,t){return!!h(e,t)}(i,a);return!1},set:function(a,n){r&&a&&("object"==typeof a||"function"==typeof a)?(e||(e=new r),l(e,a,n)):c?(t||(t=new c),m(t,a,n)):(i||(i={key:{},next:null}),function(e,t,i){var a=h(e,t);a?a.value=i:e.next={key:t,next:e.next,value:i}}(i,a,n))}};return a}},7903:e=>{"use strict";function t(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return a(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?a(e,t):void 0}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}function n(){this._defaults=[]}for(var o=function(){var e=r[s];n.prototype[e]=function(){for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];return this._defaults.push({fn:e,args:i}),this}},s=0,r=["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert","disableTLSCerts"];s<r.length;s++)o();n.prototype._setDefaults=function(e){var a,n=function(e,t){var a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!a){if(Array.isArray(e)||(a=i(e))||t&&e&&"number"==typeof e.length){a&&(e=a);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,r=!0,c=!1;return{s:function(){a=a.call(e)},n:function(){var e=a.next();return r=e.done,e},e:function(e){c=!0,s=e},f:function(){try{r||null==a.return||a.return()}finally{if(c)throw s}}}}(this._defaults);try{for(n.s();!(a=n.n()).done;){var o=a.value;e[o.fn].apply(e,t(o.args))}}catch(e){n.e(e)}finally{n.f()}},e.exports=n},1930:(e,t,i)=>{"use strict";function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}var n=i(7310).parse,o=i(7866).CookieJar,s=i(7866).CookieAccessInfo,r=i(8873),c=i(4141),p=i(7903);function l(e){if(!(this instanceof l))return new l(e);p.call(this),this.jar=new o,e&&(e.ca&&this.ca(e.ca),e.key&&this.key(e.key),e.pfx&&this.pfx(e.pfx),e.cert&&this.cert(e.cert),!1===e.rejectUnauthorized&&this.disableTLSCerts())}e.exports=l,l.prototype=Object.create(p.prototype),l.prototype._saveCookies=function(e){var t=e.headers["set-cookie"];t&&this.jar.setCookies(t)},l.prototype._attachCookies=function(e){var t=n(e.url),i=new s(t.hostname,t.pathname,"https:"===t.protocol),a=this.jar.getCookies(i).toValueString();e.cookies=a};var u,d=function(e,t){var i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return a(e,t)}(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,r=!0,c=!1;return{s:function(){i=i.call(e)},n:function(){var e=i.next();return r=e.done,e},e:function(e){c=!0,s=e},f:function(){try{r||null==i.return||i.return()}finally{if(c)throw s}}}}(r);try{var m=function(){var e=u.value,t=e.toUpperCase();l.prototype[e]=function(e,i){var a=new c.Request(t,e);return a.on("response",this._saveCookies.bind(this)),a.on("redirect",this._saveCookies.bind(this)),a.on("redirect",this._attachCookies.bind(this,a)),this._setDefaults(a),this._attachCookies(a),i&&a.end(i),a}};for(d.s();!(u=d.n()).done;)m()}catch(e){d.e(e)}finally{d.f()}l.prototype.del=l.prototype.delete},8539:(e,t,i)=>{"use strict";function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var o,s=i(2781),r=i(3837),c=i(1808),p=i(4404),l=i(7310).parse,u=i(7282);if(!i(5903)(u.version,"v10.10.0"))throw new Error("superagent: this version of Node.js does not support http2");var d=(o=i(6281)).constants,m=d.HTTP2_HEADER_PATH,f=d.HTTP2_HEADER_STATUS,h=d.HTTP2_HEADER_METHOD,v=d.HTTP2_HEADER_AUTHORITY,x=d.HTTP2_HEADER_HOST,g=d.HTTP2_HEADER_SET_COOKIE,b=d.NGHTTP2_CANCEL;function y(e,t){var i=this;s.call(this);var r="https:"===e?443:80,c=t.port||r,p=t.host||"localhost";delete t.port,delete t.host,this.method=t.method,this.path=t.path,this.protocol=e,this.host=p,delete t.method,delete t.path;var l=function(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}({},t);t.socketPath&&(l.socketPath=t.socketPath,l.createConnection=this.createUnixConnection.bind(this)),this._headers={};var u=o.connect("".concat(e,"//").concat(p,":").concat(c),l);this.setHeader("host","".concat(p,":").concat(c)),u.on("error",(function(e){return i.emit("error",e)})),this.session=u}r.inherits(y,s),y.prototype.createUnixConnection=function(e,t){switch(this.protocol){case"http:":return c.connect(t.socketPath);case"https:":return t.ALPNProtocols=["h2"],t.servername=this.host,t.allowHalfOpen=!0,p.connect(t.socketPath,t);default:throw new Error("Unsupported protocol",this.protocol)}},y.prototype.setNoDelay=function(e){},y.prototype.getFrame=function(){var e,t=this;if(this.frame)return this.frame;var i=(n(e={},m,this.path),n(e,h,this.method),e),a=this.mapToHttp2Header(this._headers);a=Object.assign(a,i);var o=this.session.request(a);return o.once("response",(function(e,i){e=t.mapToHttpHeader(e),o.headers=e,o.statusCode=e[f],o.status=o.statusCode,t.emit("response",o)})),this._headerSent=!0,o.once("drain",(function(){return t.emit("drain")})),o.on("error",(function(e){return t.emit("error",e)})),o.on("close",(function(){return t.session.close()})),this.frame=o,o},y.prototype.mapToHttpHeader=function(e){for(var t={},i=0,a=Object.keys(e);i<a.length;i++){var n=a[i],o=e[n];if((n=n.toLowerCase())===g)o=Array.isArray(o)?o:[o];t[n]=o}return t},y.prototype.mapToHttp2Header=function(e){for(var t={},i=0,a=Object.keys(e);i<a.length;i++){var n=a[i],o=e[n];if((n=n.toLowerCase())===x)n=v,o=/^http:\/\/|^https:\/\//.test(o)?l(o).host:o;t[n]=o}return t},y.prototype.setHeader=function(e,t){this._headers[e.toLowerCase()]=t},y.prototype.getHeader=function(e){return this._headers[e.toLowerCase()]},y.prototype.write=function(e,t){return this.getFrame().write(e,t)},y.prototype.pipe=function(e,t){return this.getFrame().pipe(e,t)},y.prototype.end=function(e){this.getFrame().end(e)},y.prototype.abort=function(e){this.getFrame().close(b),this.session.destroy()},t.setProtocol=function(e){return{request:function(t){return new y(e,t)}}}},4141:(e,t,i)=>{"use strict";function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var i=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==i)return;var a,n,o=[],s=!0,r=!1;try{for(i=i.call(e);!(s=(a=i.next()).done)&&(o.push(a.value),!t||o.length!==t);s=!0);}catch(e){r=!0,n=e}finally{try{s||null==i.return||i.return()}finally{if(r)throw n}}return o}(e,t)||n(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){if(e){if("string"==typeof e)return o(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}var r,c,p=i(7310),l=p.parse,u=p.format,d=p.resolve,m=i(2781),f=i(5687),h=i(3685),v=i(7147),x=i(9796),g=i(3837),b=i(129),y=i(3893),w=i(8873),k=i(6882),j=i(2616),E=i(5158)("superagent"),_=i(7866),S=i(5903),O=i(4445),A=i(4506),T=i(8899),C=i(8570).unzip,N=i(4435),R=A.mixin,P=A.hasOwn;function I(e,i){return"function"==typeof i?new t.Request("GET",e).end(i):1===arguments.length?new t.Request("GET",e):new t.Request(e,i)}function F(){}function z(e){e._header={},e.header={}}function L(e,t){m.call(this),"string"!=typeof t&&(t=u(t)),this._enableHttp2=Boolean(process.env.HTTP2_TEST),this._agent=!1,this._formData=null,this.method=e,this.url=t,z(this),this.writable=!0,this._redirects=0,this.redirects("HEAD"===e?0:5),this.cookies="",this.qs={},this._query=[],this.qsRaw=this._query,this._redirectList=[],this._streamRequest=!1,this._lookup=void 0,this.once("end",this.clearTimeout.bind(this))}S(process.version,"v10.10.0")&&(r=i(8539)),e.exports=I,(t=e.exports).Request=L,t.agent=i(1930),t.Response=N,y.define({"application/x-www-form-urlencoded":["form","urlencoded","form-data"]},!0),t.protocols={"http:":h,"https:":f,"http2:":r},t.serialize={"application/x-www-form-urlencoded":b.stringify,"application/json":O},t.parse=i(2099),t.buffer={},g.inherits(L,m),R(L.prototype,T.prototype),L.prototype.http2=function(e){if(void 0===t.protocols["http2:"])throw new Error("superagent: this version of Node.js does not support http2");return this._enableHttp2=void 0===e||e,this},L.prototype.attach=function(e,t,i){var a=this;if(t){if(this._data)throw new Error("superagent can't mix .send() and .attach()");var n=i||{};"string"==typeof i&&(n={filename:i}),"string"==typeof t?(n.filename||(n.filename=t),E("creating `fs.ReadStream` instance for file: %s",t),(t=v.createReadStream(t)).on("error",(function(e){a._getFormData().emit("error",e)}))):!n.filename&&t.path&&(n.filename=t.path),this._getFormData().append(e,t,n)}return this},L.prototype._getFormData=function(){var e=this;return this._formData||(this._formData=new k,this._formData.on("error",(function(t){E("FormData error",t),e.called||(e.callback(t),e.abort())}))),this._formData},L.prototype.agent=function(e){return 0===arguments.length?this._agent:(this._agent=e,this)},L.prototype.lookup=function(e){return 0===arguments.length?this._lookup:(this._lookup=e,this)},L.prototype.type=function(e){return this.set("Content-Type",e.includes("/")?e:y.getType(e))},L.prototype.accept=function(e){return this.set("Accept",e.includes("/")?e:y.getType(e))},L.prototype.query=function(e){return"string"==typeof e?this._query.push(e):Object.assign(this.qs,e),this},L.prototype.write=function(e,t){var i=this.request();return this._streamRequest||(this._streamRequest=!0),i.write(e,t)},L.prototype.pipe=function(e,t){return this.piped=!0,this.buffer(!1),this.end(),this._pipeContinue(e,t)},L.prototype._pipeContinue=function(e,t){var i=this;return this.req.once("response",(function(a){if(U(a.statusCode)&&i._redirects++!==i._maxRedirects)return i._redirect(a)===i?i._pipeContinue(e,t):void 0;if(i.res=a,i._emitResponse(),!i._aborted){if(i._shouldUnzip(a)){var n=x.createUnzip();n.on("error",(function(t){t&&"Z_BUF_ERROR"===t.code?e.emit("end"):e.emit("error",t)})),a.pipe(n).pipe(e,t)}else a.pipe(e,t);a.once("end",(function(){i.emit("end")}))}})),e},L.prototype.buffer=function(e){return this._buffer=!1!==e,this},L.prototype._redirect=function(e){var t=e.headers.location;if(!t)return this.callback(new Error("No location header for redirect"),e);E("redirect %s -> %s",this.url,t),t=d(this.url,t),e.resume();var i=this.req.getHeaders?this.req.getHeaders():this.req._headers,a=l(t).host!==l(this.url).host;return 301!==e.statusCode&&302!==e.statusCode||(i=A.cleanHeader(i,a),this.method="HEAD"===this.method?"HEAD":"GET",this._data=null),303===e.statusCode&&(i=A.cleanHeader(i,a),this.method="GET",this._data=null),delete i.host,delete this.req,delete this._formData,z(this),this._endCalled=!1,this.url=t,this.qs={},this._query.length=0,this.set(i),this.emit("redirect",e),this._redirectList.push(this.url),this.end(this._callback),this},L.prototype.auth=function(e,t,i){1===arguments.length&&(t=""),"object"===s(t)&&null!==t&&(i=t,t=""),i||(i={type:"basic"});var a=function(e){return Buffer.from(e).toString("base64")};return this._auth(e,t,i,a)},L.prototype.ca=function(e){return this._ca=e,this},L.prototype.key=function(e){return this._key=e,this},L.prototype.pfx=function(e){return"object"!==s(e)||Buffer.isBuffer(e)?this._pfx=e:(this._pfx=e.pfx,this._passphrase=e.passphrase),this},L.prototype.cert=function(e){return this._cert=e,this},L.prototype.disableTLSCerts=function(){return this._disableTLSCerts=!0,this},L.prototype.request=function(){var e=this;if(this.req)return this.req;var i={};try{var a=b.stringify(this.qs,{indices:!1,strictNullHandling:!0});a&&(this.qs={},this._query.push(a)),this._finalizeQueryString()}catch(e){return this.emit("error",e)}var n,o=this.url,r=this._retries;if(o.includes("`")){var c=o.indexOf("?");if(-1!==c){var p=o.slice(c+1);n=p.match(/`|%60/g)}}if(0!==o.indexOf("http")&&(o="http://".concat(o)),o=l(o),n){var u=0;o.query=o.query.replace(/%60/g,(function(){return n[u++]})),o.search="?".concat(o.query),o.path=o.pathname+o.search}if(!0===/^https?\+unix:/.test(o.protocol)){o.protocol="".concat(o.protocol.split("+")[0],":");var d=o.path.match(/^([^/]+)(.+)$/);i.socketPath=d[1].replace(/%2F/g,"/"),o.path=d[2]}if(this._connectOverride){var m,f,h=o.hostname,v=h in this._connectOverride?this._connectOverride[h]:this._connectOverride["*"];if(v)this._header.host||this.set("host",o.host),"object"===s(v)?(m=v.host,f=v.port):(m=v,f=o.port),o.host=/:/.test(m)?"[".concat(m,"]"):m,f&&(o.host+=":".concat(f),o.port=f),o.hostname=m}i.method=this.method,i.port=o.port,i.path=o.path,i.host=o.hostname,i.ca=this._ca,i.key=this._key,i.pfx=this._pfx,i.cert=this._cert,i.passphrase=this._passphrase,i.agent=this._agent,i.lookup=this._lookup,i.rejectUnauthorized="boolean"==typeof this._disableTLSCerts?!this._disableTLSCerts:"0"!==process.env.NODE_TLS_REJECT_UNAUTHORIZED,this._header.host&&(i.servername=this._header.host.replace(/:\d+$/,"")),this._trustLocalhost&&/^(?:localhost|127\.0\.0\.\d+|(0*:)+:0*1)$/.test(o.hostname)&&(i.rejectUnauthorized=!1);var x=this._enableHttp2?t.protocols["http2:"].setProtocol(o.protocol):t.protocols[o.protocol];this.req=x.request(i);var g=this.req;if(g.setNoDelay(!0),"HEAD"!==i.method&&g.setHeader("Accept-Encoding","gzip, deflate"),this.protocol=o.protocol,this.host=o.host,g.once("drain",(function(){e.emit("drain")})),g.on("error",(function(t){e._aborted||e._retries===r&&(e.response||e.callback(t))})),o.auth){var y=o.auth.split(":");this.auth(y[0],y[1])}for(var w in this.username&&this.password&&this.auth(this.username,this.password),this.header)P(this.header,w)&&g.setHeader(w,this.header[w]);if(this.cookies)if(P(this._header,"cookie")){var k=new _.CookieJar;k.setCookies(this._header.cookie.split(";")),k.setCookies(this.cookies.split(";")),g.setHeader("Cookie",k.getCookies(_.CookieAccessInfo.All).toValueString())}else g.setHeader("Cookie",this.cookies);return g},L.prototype.callback=function(e,t){if(this._shouldRetry(e,t))return this._retry();var i=this._callback||F;if(this.clearTimeout(),this.called)return console.warn("superagent: double callback bug");if(this.called=!0,!e)try{if(!this._isResponseOK(t)){var a="Unsuccessful HTTP response";t&&(a=h.STATUS_CODES[t.status]||a),(e=new Error(a)).status=t?t.status:void 0}}catch(i){(e=i).status=e.status||(t?t.status:void 0)}if(!e)return i(null,t);e.response=t,this._maxRetries&&(e.retries=this._retries-1),e&&this.listeners("error").length>0&&this.emit("error",e),i(e,t)},L.prototype._isHost=function(e){return Buffer.isBuffer(e)||e instanceof m||e instanceof k},L.prototype._emitResponse=function(e,t){var i=new N(this);return this.response=i,i.redirects=this._redirectList,void 0!==e&&(i.body=e),i.files=t,this._endCalled&&(i.pipe=function(){throw new Error("end() has already been called, so it's too late to start piping")}),this.emit("response",i),i},L.prototype.end=function(e){if(this.request(),E("%s %s",this.method,this.url),this._endCalled)throw new Error(".end() was called twice. This is not supported in superagent");this._endCalled=!0,this._callback=e||F,this._end()},L.prototype._end=function(){var e=this;if(this._aborted)return this.callback(new Error("The request has been aborted even before .end() was called"));var i=this._data,n=this.req,o=this.method;if(this._setTimeouts(),"HEAD"!==o&&!n._headerSent){if("string"!=typeof i){var s=n.getHeader("Content-Type");s&&(s=s.split(";")[0]);var r=this._serializer||t.serialize[s];!r&&M(s)&&(r=t.serialize["application/json"]),r&&(i=r(i))}i&&!n.getHeader("Content-Length")&&n.setHeader("Content-Length",Buffer.isBuffer(i)?i.length:Buffer.byteLength(i))}n.once("response",(function(i){if(E("%s %s -> %s",e.method,e.url,i.statusCode),e._responseTimeoutTimer&&clearTimeout(e._responseTimeoutTimer),!e.piped){var o=e._maxRedirects,s=A.type(i.headers["content-type"]||"")||"text/plain",r=s.split("/")[0];r&&(r=r.toLowerCase().trim());var c="multipart"===r,p=U(i.statusCode),l=e._responseType;if(e.res=i,p&&e._redirects++!==o)return e._redirect(i);if("HEAD"===e.method)return e.emit("end"),void e.callback(null,e._emitResponse());e._shouldUnzip(i)&&C(n,i);var u=e._buffer;void 0===u&&s in t.buffer&&(u=Boolean(t.buffer[s]));var d=e._parser;if(void 0===u&&d&&(console.warn("A custom superagent parser has been set, but buffering strategy for the parser hasn't been configured. Call `req.buffer(true or false)` or set `superagent.buffer[mime] = true or false`"),u=!0),!d)if(l)d=t.parse.image,u=!0;else if(c){var m=j();d=m.parse.bind(m),u=!0}else!function(e){var t=a(e.split("/"),2),i=t[0],n=t[1];i&&(i=i.toLowerCase().trim());n&&(n=n.toLowerCase().trim());return["audio","font","image","video"].includes(i)||["gz","gzip"].includes(n)}(s)?t.parse[s]?d=t.parse[s]:"text"===r?(d=t.parse.text,u=!1!==u):M(s)?(d=t.parse["application/json"],u=!1!==u):u?d=t.parse.text:void 0===u&&(d=t.parse.image,u=!0):(d=t.parse.image,u=!0);(void 0===u&&function(e){var t=e.split("/"),i=t[0];i&&(i=i.toLowerCase().trim());var a=t[1];a&&(a=a.toLowerCase().trim());return"text"===i||"x-www-form-urlencoded"===a}(s)||M(s))&&(u=!0),e._resBuffered=u;var f=!1;if(u){var h=e._maxResponseSize||2e8;i.on("data",(function(t){if((h-=t.byteLength||t.length>0?t.length:0)<0){var a=new Error("Maximum response size reached");a.code="ETOOLARGE",f=!1,i.destroy(a),e.callback(a,null)}}))}if(d)try{f=u,d(i,(function(t,i,a){if(!e.timedout)return t&&!e._aborted?e.callback(t):void(f&&(e.emit("end"),e.callback(null,e._emitResponse(i,a))))}))}catch(t){return void e.callback(t)}if(e.res=i,u)i.once("error",(function(t){f=!1,e.callback(t,null)})),f||i.once("end",(function(){E("end %s %s",e.method,e.url),e.emit("end"),e.callback(null,e._emitResponse())}));else{if(E("unbuffered %s %s",e.method,e.url),e.callback(null,e._emitResponse()),c)return;i.once("end",(function(){E("end %s %s",e.method,e.url),e.emit("end")}))}}})),this.emit("request",this);var c=function(){var t=n.getHeader("Content-Length"),i=0,a=new m.Transform;return a._transform=function(a,n,o){i+=a.length,e.emit("progress",{direction:"upload",lengthComputable:true,loaded:i,total:t}),o(null,a)},a},p=this._formData;if(p){var l=p.getHeaders();for(var u in l)P(l,u)&&(E('setting FormData header: "%s: %s"',u,l[u]),n.setHeader(u,l[u]));p.getLength((function(e,t){e&&E("formData.getLength had error",e,t),E("got FormData Content-Length: %s",t),"number"==typeof t&&n.setHeader("Content-Length",t),p.pipe(c()).pipe(n)}))}else Buffer.isBuffer(i)?function(e){for(var t=16384,i=new m.Readable,a=e.length,n=a%t,o=a-n,s=0;s<o;s+=t){var r=e.slice(s,s+t);i.push(r)}if(n>0){var c=e.slice(-n);i.push(c)}return i.push(null),i}(i).pipe(c()).pipe(n):n.end(i)},L.prototype._shouldUnzip=function(e){return 204!==e.statusCode&&304!==e.statusCode&&("0"!==e.headers["content-length"]&&/^\s*(?:deflate|gzip)\s*$/.test(e.headers["content-encoding"]))},L.prototype.connect=function(e){return"string"==typeof e?this._connectOverride={"*":e}:"object"===s(e)?this._connectOverride=e:this._connectOverride=void 0,this},L.prototype.trustLocalhost=function(e){return this._trustLocalhost=void 0===e||e,this},w.includes("del")||(w=function(e){if(Array.isArray(e))return o(e)}(c=w)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(c)||n(c)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).push("del");var D,$=function(e,t){var i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=n(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,r=!0,c=!1;return{s:function(){i=i.call(e)},n:function(){var e=i.next();return r=e.done,e},e:function(e){c=!0,s=e},f:function(){try{r||null==i.return||i.return()}finally{if(c)throw s}}}}(w);try{var q=function(){var e=D.value,t=e;e=(e="del"===e?"delete":e).toUpperCase(),I[t]=function(t,i,a){var n=I(e,t);return"function"==typeof i&&(a=i,i=null),i&&("GET"===e||"HEAD"===e?n.query(i):n.send(i)),a&&n.end(a),n}};for($.s();!(D=$.n()).done;)q()}catch(e){$.e(e)}finally{$.f()}function M(e){return/[/+]json($|[^-\w])/i.test(e)}function U(e){return[301,302,303,305,307,308].includes(e)}},3787:e=>{"use strict";e.exports=function(e,t){var i=[];e.on("data",(function(e){i.push(e)})),e.on("end",(function(){t(null,Buffer.concat(i))}))}},2099:(e,t,i)=>{"use strict";t["application/x-www-form-urlencoded"]=i(7979),t["application/json"]=i(2600),t.text=i(2975),t["application/json-seq"]=t.text;var a=i(3787);t["application/octet-stream"]=a,t["application/pdf"]=a,t.image=a},2600:e=>{"use strict";e.exports=function(e,t){e.text="",e.setEncoding("utf8"),e.on("data",(function(t){e.text+=t})),e.on("end",(function(){var i,a;try{i=e.text&&JSON.parse(e.text)}catch(t){(a=t).rawResponse=e.text||null,a.statusCode=e.statusCode}finally{t(a,i)}}))}},2975:e=>{"use strict";e.exports=function(e,t){e.text="",e.setEncoding("utf8"),e.on("data",(function(t){e.text+=t})),e.on("end",t)}},7979:(e,t,i)=>{"use strict";var a=i(129);e.exports=function(e,t){e.text="",e.setEncoding("ascii"),e.on("data",(function(t){e.text+=t})),e.on("end",(function(){try{t(null,a.parse(e.text))}catch(e){t(e)}}))}},4435:(e,t,i)=>{"use strict";var a=i(3837),n=i(2781),o=i(1097),s=i(4506).mixin;function r(e){n.call(this),this.res=e.res;var t=this.res;this.request=e,this.req=e.req,this.text=t.text,this.files=t.files||{},this.buffered=e._resBuffered,this.headers=t.headers,this.header=this.headers,this._setStatusProperties(t.statusCode),this._setHeaderProperties(this.header),this.setEncoding=t.setEncoding.bind(t),t.on("data",this.emit.bind(this,"data")),t.on("end",this.emit.bind(this,"end")),t.on("close",this.emit.bind(this,"close")),t.on("error",this.emit.bind(this,"error"))}e.exports=r,Object.defineProperty(r.prototype,"body",{get:function(){return void 0!==this._body?this._body:void 0!==this.res.body?this.res.body:{}},set:function(e){this._body=e}}),a.inherits(r,n),s(r.prototype,o.prototype),r.prototype.destroy=function(e){this.res.destroy(e)},r.prototype.pause=function(){this.res.pause()},r.prototype.resume=function(){this.res.resume()},r.prototype.toError=function(){var e=this.req,t=e.method,i=e.path,a="cannot ".concat(t," ").concat(i," (").concat(this.status,")"),n=new Error(a);return n.status=this.status,n.text=this.text,n.method=t,n.path=i,n},r.prototype.setStatusProperties=function(e){return console.warn("In superagent 2.x setStatusProperties is a private method"),this._setStatusProperties(e)},r.prototype.toJSON=function(){return{req:this.request.toJSON(),header:this.header,status:this.status,text:this.text}}},8570:(e,t,i)=>{"use strict";var a=i(1576).StringDecoder,n=i(2781),o=i(9796);t.unzip=function(e,t){var i,s=o.createUnzip(),r=new n;r.req=e,s.on("error",(function(e){e&&"Z_BUF_ERROR"===e.code?r.emit("end"):r.emit("error",e)})),t.pipe(s),t.setEncoding=function(e){i=new a(e)},s.on("data",(function(e){if(i){var t=i.write(e);t.length>0&&r.emit("data",t)}else r.emit("data",e)})),s.on("end",(function(){r.emit("end")}));var c=t.on;t.on=function(e,i){return"data"===e||"end"===e?r.on(e,i.bind(t)):"error"===e?(r.on(e,i.bind(t)),c.call(t,e,i)):c.call(t,e,i),this}}},8899:(e,t,i)=>{"use strict";function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}var n=i(1249),o=i(4506),s=o.isObject,r=o.hasOwn;function c(){}e.exports=c,c.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),clearTimeout(this._uploadTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,delete this._uploadTimeoutTimer,this},c.prototype.parse=function(e){return this._parser=e,this},c.prototype.responseType=function(e){return this._responseType=e,this},c.prototype.serialize=function(e){return this._serializer=e,this},c.prototype.timeout=function(e){if(!e||"object"!==a(e))return this._timeout=e,this._responseTimeout=0,this._uploadTimeout=0,this;for(var t in e)if(r(e,t))switch(t){case"deadline":this._timeout=e.deadline;break;case"response":this._responseTimeout=e.response;break;case"upload":this._uploadTimeout=e.upload;break;default:console.warn("Unknown timeout option",t)}return this},c.prototype.retry=function(e,t){return 0!==arguments.length&&!0!==e||(e=1),e<=0&&(e=0),this._maxRetries=e,this._retries=0,this._retryCallback=t,this};var p=new Set(["ETIMEDOUT","ECONNRESET","EADDRINUSE","ECONNREFUSED","EPIPE","ENOTFOUND","ENETUNREACH","EAI_AGAIN"]),l=new Set([408,413,429,500,502,503,504,521,522,524]);c.prototype._shouldRetry=function(e,t){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{var i=this._retryCallback(e,t);if(!0===i)return!0;if(!1===i)return!1}catch(e){console.error(e)}if(t&&t.status&&l.has(t.status))return!0;if(e){if(e.code&&p.has(e.code))return!0;if(e.timeout&&"ECONNABORTED"===e.code)return!0;if(e.crossDomain)return!0}return!1},c.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this.timedoutError=null,this._end()},c.prototype.then=function(e,t){var i=this;if(!this._fullfilledPromise){var a=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise((function(e,t){a.on("abort",(function(){if(!(i._maxRetries&&i._maxRetries>i._retries))if(i.timedout&&i.timedoutError)t(i.timedoutError);else{var e=new Error("Aborted");e.code="ABORTED",e.status=i.status,e.method=i.method,e.url=i.url,t(e)}})),a.end((function(i,a){i?t(i):e(a)}))}))}return this._fullfilledPromise.then(e,t)},c.prototype.catch=function(e){return this.then(void 0,e)},c.prototype.use=function(e){return e(this),this},c.prototype.ok=function(e){if("function"!=typeof e)throw new Error("Callback required");return this._okCallback=e,this},c.prototype._isResponseOK=function(e){return!!e&&(this._okCallback?this._okCallback(e):e.status>=200&&e.status<300)},c.prototype.get=function(e){return this._header[e.toLowerCase()]},c.prototype.getHeader=c.prototype.get,c.prototype.set=function(e,t){if(s(e)){for(var i in e)r(e,i)&&this.set(i,e[i]);return this}return this._header[e.toLowerCase()]=t,this.header[e]=t,this},c.prototype.unset=function(e){return delete this._header[e.toLowerCase()],delete this.header[e],this},c.prototype.field=function(e,t,i){if(null==e)throw new Error(".field(name, val) name can not be empty");if(this._data)throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");if(s(e)){for(var a in e)r(e,a)&&this.field(a,e[a]);return this}if(Array.isArray(t)){for(var n in t)r(t,n)&&this.field(e,t[n]);return this}if(null==t)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof t&&(t=String(t)),i?this._getFormData().append(e,t,i):this._getFormData().append(e,t),this},c.prototype.abort=function(){if(this._aborted)return this;if(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req){if(n.gte(process.version,"v13.0.0")&&n.lt(process.version,"v14.0.0"))throw new Error("Superagent does not work in v13 properly with abort() due to Node.js core changes");n.gte(process.version,"v14.0.0")&&(this.req.destroyed=!0),this.req.abort()}return this.clearTimeout(),this.emit("abort"),this},c.prototype._auth=function(e,t,i,a){switch(i.type){case"basic":this.set("Authorization","Basic ".concat(a("".concat(e,":").concat(t))));break;case"auto":this.username=e,this.password=t;break;case"bearer":this.set("Authorization","Bearer ".concat(e))}return this},c.prototype.withCredentials=function(e){return void 0===e&&(e=!0),this._withCredentials=e,this},c.prototype.redirects=function(e){return this._maxRedirects=e,this},c.prototype.maxResponseSize=function(e){if("number"!=typeof e)throw new TypeError("Invalid argument");return this._maxResponseSize=e,this},c.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},c.prototype.send=function(e){var t=s(e),i=this._header["content-type"];if(this._formData)throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");if(t&&!this._data)Array.isArray(e)?this._data=[]:this._isHost(e)||(this._data={});else if(e&&this._data&&this._isHost(this._data))throw new Error("Can't merge these send calls");if(t&&s(this._data))for(var a in e)r(e,a)&&(this._data[a]=e[a]);else"string"==typeof e?(i||this.type("form"),(i=this._header["content-type"])&&(i=i.toLowerCase().trim()),this._data="application/x-www-form-urlencoded"===i?this._data?"".concat(this._data,"&").concat(e):e:(this._data||"")+e):this._data=e;return!t||this._isHost(e)||i||this.type("json"),this},c.prototype.sortQuery=function(e){return this._sort=void 0===e||e,this},c.prototype._finalizeQueryString=function(){var e=this._query.join("&");if(e&&(this.url+=(this.url.includes("?")?"&":"?")+e),this._query.length=0,this._sort){var t=this.url.indexOf("?");if(t>=0){var i=this.url.slice(t+1).split("&");"function"==typeof this._sort?i.sort(this._sort):i.sort(),this.url=this.url.slice(0,t)+"?"+i.join("&")}}},c.prototype._appendQueryString=function(){console.warn("Unsupported")},c.prototype._timeoutError=function(e,t,i){if(!this._aborted){var a=new Error("".concat(e+t,"ms exceeded"));a.timeout=t,a.code="ECONNABORTED",a.errno=i,this.timedout=!0,this.timedoutError=a,this.abort(),this.callback(a)}},c.prototype._setTimeouts=function(){var e=this;this._timeout&&!this._timer&&(this._timer=setTimeout((function(){e._timeoutError("Timeout of ",e._timeout,"ETIME")}),this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout((function(){e._timeoutError("Response timeout of ",e._responseTimeout,"ETIMEDOUT")}),this._responseTimeout))}},1097:(e,t,i)=>{"use strict";var a=i(4506);function n(){}e.exports=n,n.prototype.get=function(e){return this.header[e.toLowerCase()]},n.prototype._setHeaderProperties=function(e){var t=e["content-type"]||"";this.type=a.type(t);var i=a.params(t);for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(this[n]=i[n]);this.links={};try{e.link&&(this.links=a.parseLinks(e.link))}catch(e){}},n.prototype._setStatusProperties=function(e){var t=Math.trunc(e/100);this.statusCode=e,this.status=this.statusCode,this.statusType=t,this.info=1===t,this.ok=2===t,this.redirect=3===t,this.clientError=4===t,this.serverError=5===t,this.error=(4===t||5===t)&&this.toError(),this.created=201===e,this.accepted=202===e,this.noContent=204===e,this.badRequest=400===e,this.unauthorized=401===e,this.notAcceptable=406===e,this.forbidden=403===e,this.notFound=404===e,this.unprocessableEntity=422===e}},4506:(e,t)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){var i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return n(e,t)}(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,r=!0,c=!1;return{s:function(){i=i.call(e)},n:function(){var e=i.next();return r=e.done,e},e:function(e){c=!0,s=e},f:function(){try{r||null==i.return||i.return()}finally{if(c)throw s}}}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}t.type=function(e){return e.split(/ *; */).shift()},t.params=function(e){var t,i={},n=a(e.split(/ *; */));try{for(n.s();!(t=n.n()).done;){var o=t.value.split(/ *= */),s=o.shift(),r=o.shift();s&&r&&(i[s]=r)}}catch(e){n.e(e)}finally{n.f()}return i},t.parseLinks=function(e){var t,i={},n=a(e.split(/ *, */));try{for(n.s();!(t=n.n()).done;){var o=t.value.split(/ *; */),s=o[0].slice(1,-1);i[o[1].split(/ *= */)[1].slice(1,-1)]=s}}catch(e){n.e(e)}finally{n.f()}return i},t.cleanHeader=function(e,t){return delete e["content-type"],delete e["content-length"],delete e["transfer-encoding"],delete e.host,t&&(delete e.authorization,delete e.cookie),e},t.isObject=function(e){return null!==e&&"object"===i(e)},t.hasOwn=Object.hasOwn||function(e,t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");return Object.prototype.hasOwnProperty.call(new Object(e),t)},t.mixin=function(e,i){for(var a in i)t.hasOwn(i,a)&&(e[a]=i[a])}},2130:(e,t,i)=>{"use strict";const a=i(2037),n=i(6560),o=process.env;let s;function r(e){const t=function(e){if(!1===s)return 0;if(n("color=16m")||n("color=full")||n("color=truecolor"))return 3;if(n("color=256"))return 2;if(e&&!e.isTTY&&!0!==s)return 0;const t=s?1:0;if("win32"===process.platform){const e=a.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some((e=>e in o))||"codeship"===o.CI_NAME?1:t;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("truecolor"===o.COLORTERM)return 3;if("TERM_PROGRAM"in o){const e=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)||"COLORTERM"in o?1:(o.TERM,t)}(e);return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(t)}n("no-color")||n("no-colors")||n("color=false")?s=!1:(n("color")||n("colors")||n("color=true")||n("color=always"))&&(s=!0),"FORCE_COLOR"in o&&(s=0===o.FORCE_COLOR.length||0!==parseInt(o.FORCE_COLOR,10)),e.exports={supportsColor:r,stdout:r(process.stdout),stderr:r(process.stderr)}},4078:function(e,t,i){var a,n,o;o=function(){function e(e){var t=[];if(0===e.length)return"";if("string"!=typeof e[0])throw new TypeError("Url must be a string. Received "+e[0]);if(e[0].match(/^[^/:]+:\/*$/)&&e.length>1){var i=e.shift();e[0]=i+e[0]}e[0].match(/^file:\/\/\//)?e[0]=e[0].replace(/^([^/:]+):\/*/,"$1:///"):e[0]=e[0].replace(/^([^/:]+):\/*/,"$1://");for(var a=0;a<e.length;a++){var n=e[a];if("string"!=typeof n)throw new TypeError("Url must be a string. Received "+n);""!==n&&(a>0&&(n=n.replace(/^[\/]+/,"")),n=a<e.length-1?n.replace(/[\/]+$/,""):n.replace(/[\/]+$/,"/"),t.push(n))}var o=t.join("/"),s=(o=o.replace(/\/(\?|&|#[^!])/g,"$1")).split("?");return o=s.shift()+(s.length>0?"?":"")+s.join("&")}return function(){return e("object"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}},e.exports?e.exports=o():void 0===(n="function"==typeof(a=o)?a.call(t,i,t,e):a)||(e.exports=n)},2479:e=>{e.exports=function e(t,i){if(t&&i)return e(t)(i);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach((function(e){a[e]=t[e]})),a;function a(){for(var e=new Array(arguments.length),i=0;i<e.length;i++)e[i]=arguments[i];var a=t.apply(this,e),n=e[e.length-1];return"function"==typeof a&&a!==n&&Object.keys(n).forEach((function(e){a[e]=n[e]})),a}}},9602:e=>{"use strict";e.exports=function(e){e.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}},4411:(e,t,i)=>{"use strict";function a(e){var t=this;if(t instanceof a||(t=new a),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var i=0,n=arguments.length;i<n;i++)t.push(arguments[i]);return t}function n(e,t,i){var a=t===e.head?new r(i,null,t,e):new r(i,t,t.next,e);return null===a.next&&(e.tail=a),null===a.prev&&(e.head=a),e.length++,a}function o(e,t){e.tail=new r(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function s(e,t){e.head=new r(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function r(e,t,i,a){if(!(this instanceof r))return new r(e,t,i,a);this.list=a,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,i?(i.prev=this,this.next=i):this.next=null}e.exports=a,a.Node=r,a.create=a,a.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,i=e.prev;return t&&(t.prev=i),i&&(i.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=i),e.list.length--,e.next=null,e.prev=null,e.list=null,t},a.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},a.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},a.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)o(this,arguments[e]);return this.length},a.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)s(this,arguments[e]);return this.length},a.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},a.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},a.prototype.forEach=function(e,t){t=t||this;for(var i=this.head,a=0;null!==i;a++)e.call(t,i.value,a,this),i=i.next},a.prototype.forEachReverse=function(e,t){t=t||this;for(var i=this.tail,a=this.length-1;null!==i;a--)e.call(t,i.value,a,this),i=i.prev},a.prototype.get=function(e){for(var t=0,i=this.head;null!==i&&t<e;t++)i=i.next;if(t===e&&null!==i)return i.value},a.prototype.getReverse=function(e){for(var t=0,i=this.tail;null!==i&&t<e;t++)i=i.prev;if(t===e&&null!==i)return i.value},a.prototype.map=function(e,t){t=t||this;for(var i=new a,n=this.head;null!==n;)i.push(e.call(t,n.value,this)),n=n.next;return i},a.prototype.mapReverse=function(e,t){t=t||this;for(var i=new a,n=this.tail;null!==n;)i.push(e.call(t,n.value,this)),n=n.prev;return i},a.prototype.reduce=function(e,t){var i,a=this.head;if(arguments.length>1)i=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");a=this.head.next,i=this.head.value}for(var n=0;null!==a;n++)i=e(i,a.value,n),a=a.next;return i},a.prototype.reduceReverse=function(e,t){var i,a=this.tail;if(arguments.length>1)i=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");a=this.tail.prev,i=this.tail.value}for(var n=this.length-1;null!==a;n--)i=e(i,a.value,n),a=a.prev;return i},a.prototype.toArray=function(){for(var e=new Array(this.length),t=0,i=this.head;null!==i;t++)e[t]=i.value,i=i.next;return e},a.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,i=this.tail;null!==i;t++)e[t]=i.value,i=i.prev;return e},a.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var i=new a;if(t<e||t<0)return i;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;for(;null!==o&&n<t;n++,o=o.next)i.push(o.value);return i},a.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var i=new a;if(t<e||t<0)return i;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=this.length,o=this.tail;null!==o&&n>t;n--)o=o.prev;for(;null!==o&&n>e;n--,o=o.prev)i.push(o.value);return i},a.prototype.splice=function(e,t,...i){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var a=0,o=this.head;null!==o&&a<e;a++)o=o.next;var s=[];for(a=0;o&&a<t;a++)s.push(o.value),o=this.removeNode(o);null===o&&(o=this.tail),o!==this.head&&o!==this.tail&&(o=o.prev);for(a=0;a<i.length;a++)o=n(this,o,i[a]);return s},a.prototype.reverse=function(){for(var e=this.head,t=this.tail,i=e;null!==i;i=i.prev){var a=i.prev;i.prev=i.next,i.next=a}return this.head=t,this.tail=e,this};try{i(9602)(a)}catch(e){}},6113:e=>{"use strict";e.exports=require("crypto")},3639:e=>{"use strict";e.exports=require("domain")},2361:e=>{"use strict";e.exports=require("events")},7147:e=>{"use strict";e.exports=require("fs")},3685:e=>{"use strict";e.exports=require("http")},6281:e=>{"use strict";e.exports=require("http2")},5687:e=>{"use strict";e.exports=require("https")},1808:e=>{"use strict";e.exports=require("net")},2037:e=>{"use strict";e.exports=require("os")},1017:e=>{"use strict";e.exports=require("path")},7282:e=>{"use strict";e.exports=require("process")},3477:e=>{"use strict";e.exports=require("querystring")},2781:e=>{"use strict";e.exports=require("stream")},1576:e=>{"use strict";e.exports=require("string_decoder")},4404:e=>{"use strict";e.exports=require("tls")},6224:e=>{"use strict";e.exports=require("tty")},7310:e=>{"use strict";e.exports=require("url")},3837:e=>{"use strict";e.exports=require("util")},9796:e=>{"use strict";e.exports=require("zlib")},3765:e=>{"use strict";e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},4147:e=>{"use strict";e.exports=JSON.parse('{"name":"node-mailjet","version":"4.0.0","main":"./dist/mailjet.node.js","browser":"./dist/mailjet.web.js","types":"./dist/declarations/index.d.ts","description":"Mailjet API client","author":"Mailjet","license":"MIT","private":true,"keywords":["email","sms","node","mail","mailjet"],"engines":{"node":">= 12.0.0","npm":">= 6.9.0"},"files":["lib/**","dist/**"],"directories":{"lib":"./lib","docs":"./docs"},"typescript":{"definition":"./dist/declarations/index.d.ts"},"scripts":{"test":"npm run ts:mocha test/","test:int":"npm run ts:mocha test/integration/","test:unit":"npm run ts:mocha test/unit/","test:watch":"mocha --extension ts -r tsconfig-paths/register -r ts-node/register --watch","cover":"npm run cover:expandable npm run test","cover:int":"npm run cover:expandable npm run test:int","cover:unit":"npm run cover:expandable npm run test:unit","cover:expandable":"nyc --reporter=text-summary --reporter=lcov --report-dir=.coverage --temp-dir=./.coverage/.nyc_output","build":"npm run build:release && npm run build:prepublish","build:dev":"webpack --config ./webpack/webpack.dev.config.js --progress --color","build:release":"webpack --config ./webpack/webpack.release.config.js --progress --color","build:prepublish":"node ./PreparePackage.js","build:watch":"webpack --watch --config ./webpack/webpack.dev.config.js --progress --color","lint":"eslint .","lint:fix":"eslint --fix .","lint:errors":"eslint --quiet .","ts:run":"ts-node --transpileOnly --project ./tsconfig.json -r tsconfig-paths/register","ts:watch":"ts-node-dev --respawn --transpile-only --project ./tsconfig.json -r tsconfig-paths/register","ts:mocha":"mocha --extension ts --recursive -r tsconfig-paths/register -r ts-node/register","ts:patch":"ts-patch install -s","init":"npm install && npm run ts:patch && npm run pkg:prepare","pkg:link":"cd ./dist && npm link && echo \'\\n=== link name: node-mailjet ===\'","pkg:prepare":"husky install","pkg:precommit":"npm audit && npm run lint:errors && npm run test","release":"standard-version -a","release:dry":"standard-version --dry-run","release:quiet":"standard-version --no-verify -a","release:minor":"standard-version -a --release-as minor","release:patch":"standard-version -a --release-as patch","release:major":"standard-version -a --release-as major","docs":"typedoc --tsconfig ./tsconfig.json"},"dependencies":{"json-bigint":"^1.0.0","qs":"^6.5.0","superagent":"^7.1.1","url-join":"^4.0.0"},"devDependencies":{"@babel/core":"^7.18.0","@babel/preset-env":"^7.18.0","@commitlint/cli":"^17.0.2","@commitlint/config-conventional":"^17.0.2","@types/chai":"^4.3.1","@types/json-bigint":"^1.0.1","@types/mocha":"^9.1.1","@types/node":"^17.0.34","@types/qs":"^6.9.7","@types/superagent":"^4.1.15","@types/url-join":"^4.0.1","@typescript-eslint/eslint-plugin":"^5.24.0","@typescript-eslint/parser":"^5.24.0","babel-loader":"^8.2.5","chai":"^4.1.0","eslint":"^8.15.0","eslint-config-airbnb-base":"^15.0.0","eslint-import-resolver-typescript":"^2.7.1","eslint-plugin-import":"^2.26.0","eslint-plugin-tsdoc":"^0.2.16","husky":"^8.0.1","mocha":"^9.0.0","nock":"^13.2.4","nyc":"^15.1.0","standard-version":"^9.5.0","terser-webpack-plugin":"^5.3.1","ts-loader":"^9.3.0","ts-node":"^10.7.0","ts-node-dev":"^1.1.8","ts-patch":"^2.0.1","tsconfig-paths":"^4.0.0","tsconfig-paths-webpack-plugin":"^3.5.2","typedoc":"^0.22.15","typescript":"^4.6.4","typescript-transform-paths":"^3.3.1","webpack":"^5.72.1","webpack-cli":"^4.9.2","webpack-merge":"^5.8.0"},"homepage":"https://github.com/mailjet/mailjet-apiv3-nodejs#readme","repository":{"type":"git","url":"git+https://github.com/mailjet/mailjet-apiv3-nodejs.git"},"bugs":{"url":"https://github.com/mailjet/mailjet-apiv3-nodejs/issues"},"contributors":["Arnaud Breton <arnaud@mailjet.com> (https://github.com/arnaudbreton)","Nicholas Smith <nicksmith.biz@gmail.com> (https://github.com/safani)","Jérémie Parker <jeremie@vizeat.com> (https://github.com/p-j)"],"standard-version":{"commitUrlFormat":"https://github.com/mailjet/mailjet-apiv3-nodejs/commits/{{hash}}","compareUrlFormat":"https://github.com/mailjet/mailjet-apiv3-nodejs/compare/{{previousTag}}...{{currentTag}}","types":[{"type":"breaking","section":"Breaking changes"},{"type":"security","section":"Dependency changes for security"},{"type":"feature","section":"Added features"},{"type":"deprecate","section":"Deprecated features"},{"type":"remove","section":"Removed features"},{"type":"fix","section":"Bug Fixes"},{"type":"test","section":"Tests"},{"type":"build","section":"Build changes"},{"type":"docs","section":"Docs changes"},{"type":"other","section":"Other changes"},{"type":"chore","hidden":true}],"scripts":{"prerelease":"npm run build:release","postchangelog":"npm run build:prepublish && git add -A dist","posttag":"git push && git push --tags"}}}')}},t={};function i(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={exports:{}};return e[a].call(o.exports,o,o.exports,i),o.exports}i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var a=i(8321);return a=a.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,